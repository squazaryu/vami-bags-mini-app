{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRoundNumber = exports.getGradientPercentColor = exports.getColorAlpha = exports.generateColor = exports.genAlphaColor = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _colorPicker = require(\"@rc-component/color-picker\");\nvar _color = require(\"./color\");\nconst generateColor = color => {\n  if (color instanceof _color.AggregationColor) {\n    return color;\n  }\n  return new _color.AggregationColor(color);\n};\nexports.generateColor = generateColor;\nconst getRoundNumber = value => Math.round(Number(value || 0));\nexports.getRoundNumber = getRoundNumber;\nconst getColorAlpha = color => getRoundNumber(color.toHsb().a * 100);\n/** Return the color whose `alpha` is 1 */\nexports.getColorAlpha = getColorAlpha;\nconst genAlphaColor = (color, alpha) => {\n  const rgba = color.toRgb();\n  // Color from hsb input may get `rgb` is (0/0/0) when `hsb.b` is 0\n  // So if rgb is empty, we should get from hsb\n  if (!rgba.r && !rgba.g && !rgba.b) {\n    const hsba = color.toHsb();\n    hsba.a = alpha || 1;\n    return generateColor(hsba);\n  }\n  rgba.a = alpha || 1;\n  return generateColor(rgba);\n};\n/**\n * Get percent position color. e.g. [10%-#fff, 20%-#000], 15% => #888\n */\nexports.genAlphaColor = genAlphaColor;\nconst getGradientPercentColor = (colors, percent) => {\n  const filledColors = [{\n    percent: 0,\n    color: colors[0].color\n  }].concat((0, _toConsumableArray2.default)(colors), [{\n    percent: 100,\n    color: colors[colors.length - 1].color\n  }]);\n  for (let i = 0; i < filledColors.length - 1; i += 1) {\n    const startPtg = filledColors[i].percent;\n    const endPtg = filledColors[i + 1].percent;\n    const startColor = filledColors[i].color;\n    const endColor = filledColors[i + 1].color;\n    if (startPtg <= percent && percent <= endPtg) {\n      const dist = endPtg - startPtg;\n      if (dist === 0) {\n        return startColor;\n      }\n      const ratio = (percent - startPtg) / dist * 100;\n      const startRcColor = new _colorPicker.Color(startColor);\n      const endRcColor = new _colorPicker.Color(endColor);\n      return startRcColor.mix(endRcColor, ratio).toRgbString();\n    }\n  }\n  // This will never reach\n  /* istanbul ignore next */\n  return '';\n};\nexports.getGradientPercentColor = getGradientPercentColor;","map":{"version":3,"names":["_interopRequireDefault","require","default","Object","defineProperty","exports","value","getRoundNumber","getGradientPercentColor","getColorAlpha","generateColor","genAlphaColor","_toConsumableArray2","_colorPicker","_color","color","AggregationColor","Math","round","Number","toHsb","a","alpha","rgba","toRgb","r","g","b","hsba","colors","percent","filledColors","concat","length","i","startPtg","endPtg","startColor","endColor","dist","ratio","startRcColor","Color","endRcColor","mix","toRgbString"],"sources":["/Users/tumowuh/Desktop/backups/sumki-mini-app_Release_Vers_20250401_221838/node_modules/antd/lib/color-picker/util.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRoundNumber = exports.getGradientPercentColor = exports.getColorAlpha = exports.generateColor = exports.genAlphaColor = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _colorPicker = require(\"@rc-component/color-picker\");\nvar _color = require(\"./color\");\nconst generateColor = color => {\n  if (color instanceof _color.AggregationColor) {\n    return color;\n  }\n  return new _color.AggregationColor(color);\n};\nexports.generateColor = generateColor;\nconst getRoundNumber = value => Math.round(Number(value || 0));\nexports.getRoundNumber = getRoundNumber;\nconst getColorAlpha = color => getRoundNumber(color.toHsb().a * 100);\n/** Return the color whose `alpha` is 1 */\nexports.getColorAlpha = getColorAlpha;\nconst genAlphaColor = (color, alpha) => {\n  const rgba = color.toRgb();\n  // Color from hsb input may get `rgb` is (0/0/0) when `hsb.b` is 0\n  // So if rgb is empty, we should get from hsb\n  if (!rgba.r && !rgba.g && !rgba.b) {\n    const hsba = color.toHsb();\n    hsba.a = alpha || 1;\n    return generateColor(hsba);\n  }\n  rgba.a = alpha || 1;\n  return generateColor(rgba);\n};\n/**\n * Get percent position color. e.g. [10%-#fff, 20%-#000], 15% => #888\n */\nexports.genAlphaColor = genAlphaColor;\nconst getGradientPercentColor = (colors, percent) => {\n  const filledColors = [{\n    percent: 0,\n    color: colors[0].color\n  }].concat((0, _toConsumableArray2.default)(colors), [{\n    percent: 100,\n    color: colors[colors.length - 1].color\n  }]);\n  for (let i = 0; i < filledColors.length - 1; i += 1) {\n    const startPtg = filledColors[i].percent;\n    const endPtg = filledColors[i + 1].percent;\n    const startColor = filledColors[i].color;\n    const endColor = filledColors[i + 1].color;\n    if (startPtg <= percent && percent <= endPtg) {\n      const dist = endPtg - startPtg;\n      if (dist === 0) {\n        return startColor;\n      }\n      const ratio = (percent - startPtg) / dist * 100;\n      const startRcColor = new _colorPicker.Color(startColor);\n      const endRcColor = new _colorPicker.Color(endColor);\n      return startRcColor.mix(endRcColor, ratio).toRgbString();\n    }\n  }\n  // This will never reach\n  /* istanbul ignore next */\n  return '';\n};\nexports.getGradientPercentColor = getGradientPercentColor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}