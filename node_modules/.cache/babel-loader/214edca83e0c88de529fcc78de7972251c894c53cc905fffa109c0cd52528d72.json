{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SELECTION_NONE = exports.SELECTION_INVERT = exports.SELECTION_COLUMN = exports.SELECTION_ALL = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar React = _react;\nvar _DownOutlined = _interopRequireDefault(require(\"@ant-design/icons/DownOutlined\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _rcTable = require(\"rc-table\");\nvar _util = require(\"rc-tree/lib/util\");\nvar _conductUtil = require(\"rc-tree/lib/utils/conductUtil\");\nvar _treeUtil = require(\"rc-tree/lib/utils/treeUtil\");\nvar _useMergedState = _interopRequireDefault(require(\"rc-util/lib/hooks/useMergedState\"));\nvar _useMultipleSelect = _interopRequireDefault(require(\"../../_util/hooks/useMultipleSelect\"));\nvar _warning = require(\"../../_util/warning\");\nvar _checkbox = _interopRequireDefault(require(\"../../checkbox\"));\nvar _dropdown = _interopRequireDefault(require(\"../../dropdown\"));\nvar _radio = _interopRequireDefault(require(\"../../radio\"));\n// TODO: warning if use ajax!!!\nconst SELECTION_COLUMN = exports.SELECTION_COLUMN = {};\nconst SELECTION_ALL = exports.SELECTION_ALL = 'SELECT_ALL';\nconst SELECTION_INVERT = exports.SELECTION_INVERT = 'SELECT_INVERT';\nconst SELECTION_NONE = exports.SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nconst flattenData = function (childrenColumnName, data) {\n  let list = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      flattenData(childrenColumnName, record[childrenColumnName], list);\n    }\n  });\n  return list;\n};\nconst useSelection = (config, rowSelection) => {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  const warning = (0, _warning.devUseWarning)('Table');\n  // ========================= MultipleSelect =========================\n  const [multipleSelect, updatePrevSelectedIndex] = (0, _useMultipleSelect.default)(item => item);\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = (0, _useMergedState.default)(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = (0, _react.useCallback)(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  // Get flatten data\n  const flattedData = (0, _react.useMemo)(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]);\n  const {\n    keyEntities\n  } = (0, _react.useMemo)(() => {\n    if (checkStrictly) {\n      return {\n        keyEntities: null\n      };\n    }\n    let convertData = data;\n    if (preserveSelectedRowKeys) {\n      // use flattedData keys\n      const keysSet = new Set(flattedData.map((record, index) => getRowKey(record, index)));\n      // remove preserveRecords that duplicate data\n      const preserveRecords = Array.from(preserveRecordsRef.current).reduce((total, _ref) => {\n        let [key, value] = _ref;\n        return keysSet.has(key) ? total : total.concat(value);\n      }, []);\n      convertData = [].concat((0, _toConsumableArray2.default)(convertData), (0, _toConsumableArray2.default)(preserveRecords));\n    }\n    return (0, _treeUtil.convertDataToEntities)(convertData, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys, flattedData]);\n  // Get all checkbox props\n  const checkboxPropsMap = (0, _react.useMemo)(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'usage', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = (0, _react.useCallback)(r => {\n    const rowKey = getRowKey(r);\n    let checkboxProps;\n    if (checkboxPropsMap.has(rowKey)) {\n      checkboxProps = checkboxPropsMap.get(getRowKey(r));\n    } else {\n      checkboxProps = getCheckboxProps ? getCheckboxProps(r) : undefined;\n    }\n    return !!(checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = (0, _react.useMemo)(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = (0, _conductUtil.conductCheck)(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = (0, _react.useMemo)(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = (0, _react.useMemo)(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\n  // Reset if rowSelection reset\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = (0, _react.useCallback)((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = (0, _react.useCallback)((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = (0, _react.useMemo)(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              warning.deprecated(false, 'onSelectInvert', 'onChange');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: function () {\n        var _a2;\n        var _a;\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        updatePrevSelectedIndex(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  const transformColumns = (0, _react.useCallback)(columns => {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'usage', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // >>>>>>>>>>> Support selection\n    let cloneColumns = (0, _toConsumableArray2.default)(columns);\n    const keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      updatePrevSelectedIndex(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    let columnTitleCheckbox;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(_dropdown.default, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(_DownOutlined.default, null))));\n      }\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref2 => {\n        let {\n          disabled\n        } = _ref2;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref4 => {\n        let {\n          checked\n        } = _ref4;\n        return checked;\n      });\n      columnTitleCheckbox = /*#__PURE__*/React.createElement(_checkbox.default, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      });\n      title = !hideSelectAll && (/*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, columnTitleCheckbox, customizeSelections));\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        return {\n          node: (/*#__PURE__*/React.createElement(_radio.default, Object.assign({}, checkboxProps, {\n            checked: checked,\n            onClick: e => {\n              var _a;\n              e.stopPropagation();\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n            },\n            onChange: event => {\n              var _a;\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, event);\n            }\n          }))),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'usage', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: (/*#__PURE__*/React.createElement(_checkbox.default, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => {\n              var _a;\n              e.stopPropagation();\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n            },\n            onChange: event => {\n              var _a;\n              const {\n                nativeEvent\n              } = event;\n              const {\n                shiftKey\n              } = nativeEvent;\n              const currentSelectedIndex = recordKeys.findIndex(item => item === key);\n              const isMultiple = derivedSelectedKeys.some(item => recordKeys.includes(item));\n              if (shiftKey && checkStrictly && isMultiple) {\n                const changedKeys = multipleSelect(currentSelectedIndex, recordKeys, keySet);\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? (0, _util.arrDel)(originCheckedKeys, key) : (0, _util.arrAdd)(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = (0, _conductUtil.conductCheck)([].concat((0, _toConsumableArray2.default)(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = (0, _conductUtil.conductCheck)(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                updatePrevSelectedIndex(null);\n              } else {\n                updatePrevSelectedIndex(currentSelectedIndex);\n              }\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, event);\n            }\n          }))),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[_rcTable.INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat((0, _toConsumableArray2.default)(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat((0, _toConsumableArray2.default)(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'usage', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[_rcTable.INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    const columnCls = (0, _classnames.default)(`${prefixCls}-selection-col`, {\n      [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === 'checkbox'\n    });\n    const renderColumnTitle = () => {\n      if (!(rowSelection === null || rowSelection === void 0 ? void 0 : rowSelection.columnTitle)) {\n        return title;\n      }\n      if (typeof rowSelection.columnTitle === 'function') {\n        return rowSelection.columnTitle(columnTitleCheckbox);\n      }\n      return rowSelection.columnTitle;\n    };\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: renderColumnTitle(),\n      render: renderSelectionCell,\n      onCell: rowSelection.onCell,\n      align: rowSelection.align,\n      [_rcTable.INTERNAL_COL_DEFINE]: {\n        className: columnCls\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\nvar _default = exports.default = useSelection;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","SELECTION_NONE","SELECTION_INVERT","SELECTION_COLUMN","SELECTION_ALL","_toConsumableArray2","_react","React","_DownOutlined","_classnames","_rcTable","_util","_conductUtil","_treeUtil","_useMergedState","_useMultipleSelect","_warning","_checkbox","_dropdown","_radio","EMPTY_LIST","flattenData","childrenColumnName","data","list","arguments","length","undefined","forEach","record","push","useSelection","config","rowSelection","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onChange","onSelectionChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","columnWidth","selectionColWidth","type","selectionType","selections","fixed","renderCell","customizeRenderCell","hideSelectAll","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","locale","tableLocale","getPopupContainer","warning","devUseWarning","multipleSelect","updatePrevSelectedIndex","item","mergedSelectedKeys","setMergedSelectedKeys","preserveRecordsRef","useRef","Map","updatePreserveRecordsCache","useCallback","keys","newCache","key","current","has","get","set","useEffect","flattedData","useMemo","keyEntities","convertData","keysSet","Set","map","index","preserveRecords","Array","from","reduce","total","_ref","concat","convertDataToEntities","externalGetKey","childrenPropName","checkboxPropsMap","checkboxProps","process","env","NODE_ENV","isCheckboxDisabled","r","rowKey","disabled","derivedSelectedKeys","derivedHalfSelectedKeys","checkedKeys","halfCheckedKeys","conductCheck","derivedSelectedKeySet","slice","derivedHalfSelectedKeySet","setSelectedKeys","method","availableKeys","records","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","delete","add","deprecated","selectNone","assign","_a2","_a","_len","rest","_key","call","apply","transformColumns","columns","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","columnTitleCheckbox","customizeSelections","menu","items","onSelectionClick","onClick","label","createElement","className","allDisabledData","checked","_ref2","allDisabled","allDisabledAndChecked","_ref3","allDisabledSomeChecked","_ref4","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","shiftKey","currentSelectedIndex","findIndex","isMultiple","changedKeys","recordKey","originCheckedKeys","arrDel","arrAdd","result","nextCheckedKeys","tempKeySet","renderSelectionCell","INTERNAL_COL_DEFINE","columnType","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","columnCls","renderColumnTitle","columnTitle","selectionColumn","width","render","onCell","align","_default"],"sources":["/Users/tumowuh/Desktop/backups/sumki-mini-app_Release_Vers_20250401_221838/node_modules/antd/lib/table/hooks/useSelection.js"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SELECTION_NONE = exports.SELECTION_INVERT = exports.SELECTION_COLUMN = exports.SELECTION_ALL = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar React = _react;\nvar _DownOutlined = _interopRequireDefault(require(\"@ant-design/icons/DownOutlined\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _rcTable = require(\"rc-table\");\nvar _util = require(\"rc-tree/lib/util\");\nvar _conductUtil = require(\"rc-tree/lib/utils/conductUtil\");\nvar _treeUtil = require(\"rc-tree/lib/utils/treeUtil\");\nvar _useMergedState = _interopRequireDefault(require(\"rc-util/lib/hooks/useMergedState\"));\nvar _useMultipleSelect = _interopRequireDefault(require(\"../../_util/hooks/useMultipleSelect\"));\nvar _warning = require(\"../../_util/warning\");\nvar _checkbox = _interopRequireDefault(require(\"../../checkbox\"));\nvar _dropdown = _interopRequireDefault(require(\"../../dropdown\"));\nvar _radio = _interopRequireDefault(require(\"../../radio\"));\n// TODO: warning if use ajax!!!\nconst SELECTION_COLUMN = exports.SELECTION_COLUMN = {};\nconst SELECTION_ALL = exports.SELECTION_ALL = 'SELECT_ALL';\nconst SELECTION_INVERT = exports.SELECTION_INVERT = 'SELECT_INVERT';\nconst SELECTION_NONE = exports.SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nconst flattenData = (childrenColumnName, data, list = []) => {\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      flattenData(childrenColumnName, record[childrenColumnName], list);\n    }\n  });\n  return list;\n};\nconst useSelection = (config, rowSelection) => {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  const warning = (0, _warning.devUseWarning)('Table');\n  // ========================= MultipleSelect =========================\n  const [multipleSelect, updatePrevSelectedIndex] = (0, _useMultipleSelect.default)(item => item);\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = (0, _useMergedState.default)(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = (0, _react.useCallback)(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  // Get flatten data\n  const flattedData = (0, _react.useMemo)(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]);\n  const {\n    keyEntities\n  } = (0, _react.useMemo)(() => {\n    if (checkStrictly) {\n      return {\n        keyEntities: null\n      };\n    }\n    let convertData = data;\n    if (preserveSelectedRowKeys) {\n      // use flattedData keys\n      const keysSet = new Set(flattedData.map((record, index) => getRowKey(record, index)));\n      // remove preserveRecords that duplicate data\n      const preserveRecords = Array.from(preserveRecordsRef.current).reduce((total, [key, value]) => keysSet.has(key) ? total : total.concat(value), []);\n      convertData = [].concat((0, _toConsumableArray2.default)(convertData), (0, _toConsumableArray2.default)(preserveRecords));\n    }\n    return (0, _treeUtil.convertDataToEntities)(convertData, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys, flattedData]);\n  // Get all checkbox props\n  const checkboxPropsMap = (0, _react.useMemo)(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'usage', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = (0, _react.useCallback)(r => {\n    const rowKey = getRowKey(r);\n    let checkboxProps;\n    if (checkboxPropsMap.has(rowKey)) {\n      checkboxProps = checkboxPropsMap.get(getRowKey(r));\n    } else {\n      checkboxProps = getCheckboxProps ? getCheckboxProps(r) : undefined;\n    }\n    return !!(checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = (0, _react.useMemo)(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = (0, _conductUtil.conductCheck)(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = (0, _react.useMemo)(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = (0, _react.useMemo)(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\n  // Reset if rowSelection reset\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = (0, _react.useCallback)((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = (0, _react.useCallback)((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = (0, _react.useMemo)(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              warning.deprecated(false, 'onSelectInvert', 'onChange');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: (...rest) => {\n        var _a2;\n        var _a;\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        updatePrevSelectedIndex(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  const transformColumns = (0, _react.useCallback)(columns => {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'usage', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // >>>>>>>>>>> Support selection\n    let cloneColumns = (0, _toConsumableArray2.default)(columns);\n    const keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      updatePrevSelectedIndex(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    let columnTitleCheckbox;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(_dropdown.default, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(_DownOutlined.default, null))));\n      }\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(({\n        disabled\n      }) => disabled);\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(({\n        checked\n      }) => checked);\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(({\n        checked\n      }) => checked);\n      columnTitleCheckbox = /*#__PURE__*/React.createElement(_checkbox.default, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      });\n      title = !hideSelectAll && (/*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, columnTitleCheckbox, customizeSelections));\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        return {\n          node: (/*#__PURE__*/React.createElement(_radio.default, Object.assign({}, checkboxProps, {\n            checked: checked,\n            onClick: e => {\n              var _a;\n              e.stopPropagation();\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n            },\n            onChange: event => {\n              var _a;\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, event);\n            }\n          }))),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'usage', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: (/*#__PURE__*/React.createElement(_checkbox.default, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => {\n              var _a;\n              e.stopPropagation();\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n            },\n            onChange: event => {\n              var _a;\n              const {\n                nativeEvent\n              } = event;\n              const {\n                shiftKey\n              } = nativeEvent;\n              const currentSelectedIndex = recordKeys.findIndex(item => item === key);\n              const isMultiple = derivedSelectedKeys.some(item => recordKeys.includes(item));\n              if (shiftKey && checkStrictly && isMultiple) {\n                const changedKeys = multipleSelect(currentSelectedIndex, recordKeys, keySet);\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? (0, _util.arrDel)(originCheckedKeys, key) : (0, _util.arrAdd)(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = (0, _conductUtil.conductCheck)([].concat((0, _toConsumableArray2.default)(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = (0, _conductUtil.conductCheck)(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                updatePrevSelectedIndex(null);\n              } else {\n                updatePrevSelectedIndex(currentSelectedIndex);\n              }\n              (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, event);\n            }\n          }))),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[_rcTable.INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat((0, _toConsumableArray2.default)(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat((0, _toConsumableArray2.default)(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'usage', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[_rcTable.INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    const columnCls = (0, _classnames.default)(`${prefixCls}-selection-col`, {\n      [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === 'checkbox'\n    });\n    const renderColumnTitle = () => {\n      if (!(rowSelection === null || rowSelection === void 0 ? void 0 : rowSelection.columnTitle)) {\n        return title;\n      }\n      if (typeof rowSelection.columnTitle === 'function') {\n        return rowSelection.columnTitle(columnTitleCheckbox);\n      }\n      return rowSelection.columnTitle;\n    };\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: renderColumnTitle(),\n      render: renderSelectionCell,\n      onCell: rowSelection.onCell,\n      align: rowSelection.align,\n      [_rcTable.INTERNAL_COL_DEFINE]: {\n        className: columnCls\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\nvar _default = exports.default = useSelection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}