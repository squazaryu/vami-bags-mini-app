{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _color = require(\"../../color\");\nvar _util = require(\"../../util\");\nvar _ColorSlider = require(\"../ColorSlider\");\nfunction sortColors(colors) {\n  return (0, _toConsumableArray2.default)(colors).sort((a, b) => a.percent - b.percent);\n}\n/**\n * GradientColorBar will auto show when the mode is `gradient`.\n */\nconst GradientColorBar = props => {\n  const {\n    prefixCls,\n    mode,\n    onChange,\n    onChangeComplete,\n    onActive,\n    activeIndex,\n    onGradientDragging,\n    colors\n  } = props;\n  const isGradient = mode === 'gradient';\n  // ============================= Colors =============================\n  const colorList = React.useMemo(() => colors.map(info => ({\n    percent: info.percent,\n    color: info.color.toRgbString()\n  })), [colors]);\n  const values = React.useMemo(() => colorList.map(info => info.percent), [colorList]);\n  // ============================== Drag ==============================\n  const colorsRef = React.useRef(colorList);\n  // Record current colors\n  const onDragStart = _ref => {\n    let {\n      rawValues,\n      draggingIndex,\n      draggingValue\n    } = _ref;\n    if (rawValues.length > colorList.length) {\n      // Add new node\n      const newPointColor = (0, _util.getGradientPercentColor)(colorList, draggingValue);\n      const nextColors = (0, _toConsumableArray2.default)(colorList);\n      nextColors.splice(draggingIndex, 0, {\n        percent: draggingValue,\n        color: newPointColor\n      });\n      colorsRef.current = nextColors;\n    } else {\n      colorsRef.current = colorList;\n    }\n    onGradientDragging(true);\n    onChange(new _color.AggregationColor(sortColors(colorsRef.current)), true);\n  };\n  // Adjust color when dragging\n  const onDragChange = _ref2 => {\n    let {\n      deleteIndex,\n      draggingIndex,\n      draggingValue\n    } = _ref2;\n    let nextColors = (0, _toConsumableArray2.default)(colorsRef.current);\n    if (deleteIndex !== -1) {\n      nextColors.splice(deleteIndex, 1);\n    } else {\n      nextColors[draggingIndex] = Object.assign(Object.assign({}, nextColors[draggingIndex]), {\n        percent: draggingValue\n      });\n      nextColors = sortColors(nextColors);\n    }\n    onChange(new _color.AggregationColor(nextColors), true);\n  };\n  // ============================== Key ===============================\n  const onKeyDelete = index => {\n    const nextColors = (0, _toConsumableArray2.default)(colorList);\n    nextColors.splice(index, 1);\n    const nextColor = new _color.AggregationColor(nextColors);\n    onChange(nextColor);\n    onChangeComplete(nextColor);\n  };\n  // ============================= Change =============================\n  const onInternalChangeComplete = nextValues => {\n    onChangeComplete(new _color.AggregationColor(colorList));\n    // Reset `activeIndex` if out of range\n    if (activeIndex >= nextValues.length) {\n      onActive(nextValues.length - 1);\n    }\n    onGradientDragging(false);\n  };\n  // ============================= Render =============================\n  if (!isGradient) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(_ColorSlider.GradientColorSlider, {\n    min: 0,\n    max: 100,\n    prefixCls: prefixCls,\n    className: `${prefixCls}-gradient-slider`,\n    colors: colorList,\n    color: null,\n    value: values,\n    range: true,\n    onChangeComplete: onInternalChangeComplete,\n    disabled: false,\n    type: \"gradient\",\n    // Active\n    activeIndex: activeIndex,\n    onActive: onActive,\n    // Drag\n    onDragStart: onDragStart,\n    onDragChange: onDragChange,\n    onKeyDelete: onKeyDelete\n  });\n};\nvar _default = exports.default = /*#__PURE__*/React.memo(GradientColorBar);","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","_toConsumableArray2","React","_color","_util","_ColorSlider","sortColors","colors","sort","a","b","percent","GradientColorBar","props","prefixCls","mode","onChange","onChangeComplete","onActive","activeIndex","onGradientDragging","isGradient","colorList","useMemo","map","info","color","toRgbString","values","colorsRef","useRef","onDragStart","_ref","rawValues","draggingIndex","draggingValue","length","newPointColor","getGradientPercentColor","nextColors","splice","current","AggregationColor","onDragChange","_ref2","deleteIndex","assign","onKeyDelete","index","nextColor","onInternalChangeComplete","nextValues","createElement","GradientColorSlider","min","max","className","range","disabled","type","_default","memo"],"sources":["/Users/tumowuh/Desktop/backups/sumki-mini-app_Release_Vers_20250401_221838/node_modules/antd/lib/color-picker/components/PanelPicker/GradientColorBar.js"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _color = require(\"../../color\");\nvar _util = require(\"../../util\");\nvar _ColorSlider = require(\"../ColorSlider\");\nfunction sortColors(colors) {\n  return (0, _toConsumableArray2.default)(colors).sort((a, b) => a.percent - b.percent);\n}\n/**\n * GradientColorBar will auto show when the mode is `gradient`.\n */\nconst GradientColorBar = props => {\n  const {\n    prefixCls,\n    mode,\n    onChange,\n    onChangeComplete,\n    onActive,\n    activeIndex,\n    onGradientDragging,\n    colors\n  } = props;\n  const isGradient = mode === 'gradient';\n  // ============================= Colors =============================\n  const colorList = React.useMemo(() => colors.map(info => ({\n    percent: info.percent,\n    color: info.color.toRgbString()\n  })), [colors]);\n  const values = React.useMemo(() => colorList.map(info => info.percent), [colorList]);\n  // ============================== Drag ==============================\n  const colorsRef = React.useRef(colorList);\n  // Record current colors\n  const onDragStart = ({\n    rawValues,\n    draggingIndex,\n    draggingValue\n  }) => {\n    if (rawValues.length > colorList.length) {\n      // Add new node\n      const newPointColor = (0, _util.getGradientPercentColor)(colorList, draggingValue);\n      const nextColors = (0, _toConsumableArray2.default)(colorList);\n      nextColors.splice(draggingIndex, 0, {\n        percent: draggingValue,\n        color: newPointColor\n      });\n      colorsRef.current = nextColors;\n    } else {\n      colorsRef.current = colorList;\n    }\n    onGradientDragging(true);\n    onChange(new _color.AggregationColor(sortColors(colorsRef.current)), true);\n  };\n  // Adjust color when dragging\n  const onDragChange = ({\n    deleteIndex,\n    draggingIndex,\n    draggingValue\n  }) => {\n    let nextColors = (0, _toConsumableArray2.default)(colorsRef.current);\n    if (deleteIndex !== -1) {\n      nextColors.splice(deleteIndex, 1);\n    } else {\n      nextColors[draggingIndex] = Object.assign(Object.assign({}, nextColors[draggingIndex]), {\n        percent: draggingValue\n      });\n      nextColors = sortColors(nextColors);\n    }\n    onChange(new _color.AggregationColor(nextColors), true);\n  };\n  // ============================== Key ===============================\n  const onKeyDelete = index => {\n    const nextColors = (0, _toConsumableArray2.default)(colorList);\n    nextColors.splice(index, 1);\n    const nextColor = new _color.AggregationColor(nextColors);\n    onChange(nextColor);\n    onChangeComplete(nextColor);\n  };\n  // ============================= Change =============================\n  const onInternalChangeComplete = nextValues => {\n    onChangeComplete(new _color.AggregationColor(colorList));\n    // Reset `activeIndex` if out of range\n    if (activeIndex >= nextValues.length) {\n      onActive(nextValues.length - 1);\n    }\n    onGradientDragging(false);\n  };\n  // ============================= Render =============================\n  if (!isGradient) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(_ColorSlider.GradientColorSlider, {\n    min: 0,\n    max: 100,\n    prefixCls: prefixCls,\n    className: `${prefixCls}-gradient-slider`,\n    colors: colorList,\n    color: null,\n    value: values,\n    range: true,\n    onChangeComplete: onInternalChangeComplete,\n    disabled: false,\n    type: \"gradient\",\n    // Active\n    activeIndex: activeIndex,\n    onActive: onActive,\n    // Drag\n    onDragStart: onDragStart,\n    onDragChange: onDragChange,\n    onKeyDelete: onKeyDelete\n  });\n};\nvar _default = exports.default = /*#__PURE__*/React.memo(GradientColorBar);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}