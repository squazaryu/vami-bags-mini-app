{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = require(\"react\");\nvar _warning = require(\"../../_util/warning\");\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  let rows = [];\n  let tmpRow = [];\n  let exceed = false;\n  let count = 0;\n  rowItems.filter(n => n).forEach(rowItem => {\n    const {\n        filled\n      } = rowItem,\n      restItem = __rest(rowItem, [\"filled\"]);\n    if (filled) {\n      tmpRow.push(restItem);\n      rows.push(tmpRow);\n      // reset\n      tmpRow = [];\n      count = 0;\n      return;\n    }\n    const restSpan = mergedColumn - count;\n    count += rowItem.span || 1;\n    if (count >= mergedColumn) {\n      if (count > mergedColumn) {\n        exceed = true;\n        tmpRow.push(Object.assign(Object.assign({}, restItem), {\n          span: restSpan\n        }));\n      } else {\n        tmpRow.push(restItem);\n      }\n      rows.push(tmpRow);\n      // reset\n      tmpRow = [];\n      count = 0;\n    } else {\n      tmpRow.push(restItem);\n    }\n  });\n  if (tmpRow.length > 0) {\n    rows.push(tmpRow);\n  }\n  rows = rows.map(rows => {\n    const count = rows.reduce((acc, item) => acc + (item.span || 1), 0);\n    if (count < mergedColumn) {\n      // If the span of the last element in the current row is less than the column, then add its span to the remaining columns\n      const last = rows[rows.length - 1];\n      last.span = mergedColumn - (count - (last.span || 1));\n      return rows;\n    }\n    return rows;\n  });\n  return [rows, exceed];\n}\nconst useRow = (mergedColumn, items) => {\n  const [rows, exceed] = (0, _react.useMemo)(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = (0, _warning.devUseWarning)('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return rows;\n};\nvar _default = exports.default = useRow;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_react","require","_warning","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","getCalcRows","rowItems","mergedColumn","rows","tmpRow","exceed","count","filter","n","forEach","rowItem","filled","restItem","push","restSpan","span","assign","map","reduce","acc","item","last","useRow","items","useMemo","process","env","NODE_ENV","warning","devUseWarning","_default"],"sources":["/Users/tumowuh/Desktop/backups/sumki-mini-app_Release_Vers_20250401_221838/node_modules/antd/lib/descriptions/hooks/useRow.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = require(\"react\");\nvar _warning = require(\"../../_util/warning\");\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  let rows = [];\n  let tmpRow = [];\n  let exceed = false;\n  let count = 0;\n  rowItems.filter(n => n).forEach(rowItem => {\n    const {\n        filled\n      } = rowItem,\n      restItem = __rest(rowItem, [\"filled\"]);\n    if (filled) {\n      tmpRow.push(restItem);\n      rows.push(tmpRow);\n      // reset\n      tmpRow = [];\n      count = 0;\n      return;\n    }\n    const restSpan = mergedColumn - count;\n    count += rowItem.span || 1;\n    if (count >= mergedColumn) {\n      if (count > mergedColumn) {\n        exceed = true;\n        tmpRow.push(Object.assign(Object.assign({}, restItem), {\n          span: restSpan\n        }));\n      } else {\n        tmpRow.push(restItem);\n      }\n      rows.push(tmpRow);\n      // reset\n      tmpRow = [];\n      count = 0;\n    } else {\n      tmpRow.push(restItem);\n    }\n  });\n  if (tmpRow.length > 0) {\n    rows.push(tmpRow);\n  }\n  rows = rows.map(rows => {\n    const count = rows.reduce((acc, item) => acc + (item.span || 1), 0);\n    if (count < mergedColumn) {\n      // If the span of the last element in the current row is less than the column, then add its span to the remaining columns\n      const last = rows[rows.length - 1];\n      last.span = mergedColumn - (count - (last.span || 1));\n      return rows;\n    }\n    return rows;\n  });\n  return [rows, exceed];\n}\nconst useRow = (mergedColumn, items) => {\n  const [rows, exceed] = (0, _react.useMemo)(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = (0, _warning.devUseWarning)('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return rows;\n};\nvar _default = exports.default = useRow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}