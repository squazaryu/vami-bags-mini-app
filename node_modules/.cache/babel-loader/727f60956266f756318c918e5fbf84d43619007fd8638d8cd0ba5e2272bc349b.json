{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EllipsisMeasure;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\nvar _useLayoutEffect = _interopRequireDefault(require(\"rc-util/lib/hooks/useLayoutEffect\"));\nvar _util = require(\"./util\");\nconst MeasureText = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    style,\n    children\n  } = _ref;\n  const spanRef = React.useRef(null);\n  React.useImperativeHandle(ref, () => ({\n    isExceed: () => {\n      const span = spanRef.current;\n      return span.scrollHeight > span.clientHeight;\n    },\n    getHeight: () => spanRef.current.clientHeight\n  }));\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: spanRef,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      pointerEvents: 'none',\n      backgroundColor: 'rgba(255, 0, 0, 0.65)'\n    }, style)\n  }, children);\n});\nconst getNodesLen = nodeList => nodeList.reduce((totalLen, node) => totalLen + ((0, _util.isValidText)(node) ? String(node).length : 1), 0);\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n    const node = nodeList[i];\n    const canCut = (0, _util.isValidText)(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen;\n    // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n  return nodeList;\n}\n// Measure for the `text` is exceed the `rows` or not\nconst STATUS_MEASURE_NONE = 0;\nconst STATUS_MEASURE_PREPARE = 1;\nconst STATUS_MEASURE_START = 2;\nconst STATUS_MEASURE_NEED_ELLIPSIS = 3;\nconst STATUS_MEASURE_NO_NEED_ELLIPSIS = 4;\nconst lineClipStyle = {\n  display: '-webkit-box',\n  overflow: 'hidden',\n  WebkitBoxOrient: 'vertical'\n};\nfunction EllipsisMeasure(props) {\n  const {\n    enableMeasure,\n    width,\n    text,\n    children,\n    rows,\n    expanded,\n    miscDeps,\n    onEllipsis\n  } = props;\n  const nodeList = React.useMemo(() => (0, _toArray.default)(text), [text]);\n  const nodeLen = React.useMemo(() => getNodesLen(nodeList), [text]);\n  // ========================= Full Content =========================\n  // Used for measure only, which means it's always render as no need ellipsis\n  const fullContent = React.useMemo(() => children(nodeList, false), [text]);\n  // ========================= Cut Content ==========================\n  const [ellipsisCutIndex, setEllipsisCutIndex] = React.useState(null);\n  const cutMidRef = React.useRef(null);\n  // ========================= NeedEllipsis =========================\n  const measureWhiteSpaceRef = React.useRef(null);\n  const needEllipsisRef = React.useRef(null);\n  // Measure for `rows-1` height, to avoid operation exceed the line height\n  const descRowsEllipsisRef = React.useRef(null);\n  const symbolRowEllipsisRef = React.useRef(null);\n  const [canEllipsis, setCanEllipsis] = React.useState(false);\n  const [needEllipsis, setNeedEllipsis] = React.useState(STATUS_MEASURE_NONE);\n  const [ellipsisHeight, setEllipsisHeight] = React.useState(0);\n  const [parentWhiteSpace, setParentWhiteSpace] = React.useState(null);\n  // Trigger start measure\n  (0, _useLayoutEffect.default)(() => {\n    if (enableMeasure && width && nodeLen) {\n      setNeedEllipsis(STATUS_MEASURE_PREPARE);\n    } else {\n      setNeedEllipsis(STATUS_MEASURE_NONE);\n    }\n  }, [width, text, rows, enableMeasure, nodeList]);\n  // Measure process\n  (0, _useLayoutEffect.default)(() => {\n    var _a, _b, _c, _d;\n    if (needEllipsis === STATUS_MEASURE_PREPARE) {\n      setNeedEllipsis(STATUS_MEASURE_START);\n      // Parent ref `white-space`\n      const nextWhiteSpace = measureWhiteSpaceRef.current && getComputedStyle(measureWhiteSpaceRef.current).whiteSpace;\n      setParentWhiteSpace(nextWhiteSpace);\n    } else if (needEllipsis === STATUS_MEASURE_START) {\n      const isOverflow = !!((_a = needEllipsisRef.current) === null || _a === void 0 ? void 0 : _a.isExceed());\n      setNeedEllipsis(isOverflow ? STATUS_MEASURE_NEED_ELLIPSIS : STATUS_MEASURE_NO_NEED_ELLIPSIS);\n      setEllipsisCutIndex(isOverflow ? [0, nodeLen] : null);\n      setCanEllipsis(isOverflow);\n      // Get the basic height of ellipsis rows\n      const baseRowsEllipsisHeight = ((_b = needEllipsisRef.current) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0;\n      // Get the height of `rows - 1` + symbol height\n      const descRowsEllipsisHeight = rows === 1 ? 0 : ((_c = descRowsEllipsisRef.current) === null || _c === void 0 ? void 0 : _c.getHeight()) || 0;\n      const symbolRowEllipsisHeight = ((_d = symbolRowEllipsisRef.current) === null || _d === void 0 ? void 0 : _d.getHeight()) || 0;\n      const maxRowsHeight = Math.max(baseRowsEllipsisHeight,\n      // height of rows with ellipsis\n      descRowsEllipsisHeight + symbolRowEllipsisHeight);\n      setEllipsisHeight(maxRowsHeight + 1);\n      onEllipsis(isOverflow);\n    }\n  }, [needEllipsis]);\n  // ========================= Cut Measure ==========================\n  const cutMidIndex = ellipsisCutIndex ? Math.ceil((ellipsisCutIndex[0] + ellipsisCutIndex[1]) / 2) : 0;\n  (0, _useLayoutEffect.default)(() => {\n    var _a;\n    const [minIndex, maxIndex] = ellipsisCutIndex || [0, 0];\n    if (minIndex !== maxIndex) {\n      const midHeight = ((_a = cutMidRef.current) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;\n      const isOverflow = midHeight > ellipsisHeight;\n      let targetMidIndex = cutMidIndex;\n      if (maxIndex - minIndex === 1) {\n        targetMidIndex = isOverflow ? minIndex : maxIndex;\n      }\n      setEllipsisCutIndex(isOverflow ? [minIndex, targetMidIndex] : [targetMidIndex, maxIndex]);\n    }\n  }, [ellipsisCutIndex, cutMidIndex]);\n  // ========================= Text Content =========================\n  const finalContent = React.useMemo(() => {\n    // Skip everything if `enableMeasure` is disabled\n    if (!enableMeasure) {\n      return children(nodeList, false);\n    }\n    if (needEllipsis !== STATUS_MEASURE_NEED_ELLIPSIS || !ellipsisCutIndex || ellipsisCutIndex[0] !== ellipsisCutIndex[1]) {\n      const content = children(nodeList, false);\n      // Limit the max line count to avoid scrollbar blink unless no need ellipsis\n      // https://github.com/ant-design/ant-design/issues/42958\n      if ([STATUS_MEASURE_NO_NEED_ELLIPSIS, STATUS_MEASURE_NONE].includes(needEllipsis)) {\n        return content;\n      }\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: Object.assign(Object.assign({}, lineClipStyle), {\n          WebkitLineClamp: rows\n        })\n      }, content);\n    }\n    return children(expanded ? nodeList : sliceNodes(nodeList, ellipsisCutIndex[0]), canEllipsis);\n  }, [expanded, needEllipsis, ellipsisCutIndex, nodeList].concat((0, _toConsumableArray2.default)(miscDeps)));\n  // ============================ Render ============================\n  const measureStyle = {\n    width,\n    margin: 0,\n    padding: 0,\n    whiteSpace: parentWhiteSpace === 'nowrap' ? 'normal' : 'inherit'\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, finalContent, needEllipsis === STATUS_MEASURE_START && (/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows\n    }),\n    ref: needEllipsisRef\n  }, fullContent), /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows - 1\n    }),\n    ref: descRowsEllipsisRef\n  }, fullContent), /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: 1\n    }),\n    ref: symbolRowEllipsisRef\n  }, children([], true)))), needEllipsis === STATUS_MEASURE_NEED_ELLIPSIS && ellipsisCutIndex && ellipsisCutIndex[0] !== ellipsisCutIndex[1] && (/*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign({}, measureStyle), {\n      top: 400\n    }),\n    ref: cutMidRef\n  }, children(sliceNodes(nodeList, cutMidIndex), true))), needEllipsis === STATUS_MEASURE_PREPARE && (/*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      whiteSpace: 'inherit'\n    },\n    ref: measureWhiteSpaceRef\n  })));\n}","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","EllipsisMeasure","_toConsumableArray2","React","_toArray","_useLayoutEffect","_util","MeasureText","forwardRef","_ref","ref","style","children","spanRef","useRef","useImperativeHandle","isExceed","span","current","scrollHeight","clientHeight","getHeight","createElement","assign","position","display","left","top","pointerEvents","backgroundColor","getNodesLen","nodeList","reduce","totalLen","node","isValidText","String","length","sliceNodes","len","currLen","currentNodeList","i","canCut","nodeLen","nextLen","restLen","push","slice","STATUS_MEASURE_NONE","STATUS_MEASURE_PREPARE","STATUS_MEASURE_START","STATUS_MEASURE_NEED_ELLIPSIS","STATUS_MEASURE_NO_NEED_ELLIPSIS","lineClipStyle","overflow","WebkitBoxOrient","props","enableMeasure","width","text","rows","expanded","miscDeps","onEllipsis","useMemo","fullContent","ellipsisCutIndex","setEllipsisCutIndex","useState","cutMidRef","measureWhiteSpaceRef","needEllipsisRef","descRowsEllipsisRef","symbolRowEllipsisRef","canEllipsis","setCanEllipsis","needEllipsis","setNeedEllipsis","ellipsisHeight","setEllipsisHeight","parentWhiteSpace","setParentWhiteSpace","_a","_b","_c","_d","nextWhiteSpace","getComputedStyle","whiteSpace","isOverflow","baseRowsEllipsisHeight","descRowsEllipsisHeight","symbolRowEllipsisHeight","maxRowsHeight","Math","max","cutMidIndex","ceil","minIndex","maxIndex","midHeight","targetMidIndex","finalContent","content","includes","WebkitLineClamp","concat","measureStyle","margin","padding","Fragment"],"sources":["/Users/tumowuh/Desktop/backups/sumki-mini-app_Release_Vers_20250401_221838/node_modules/antd/lib/typography/Base/Ellipsis.js"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EllipsisMeasure;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\nvar _useLayoutEffect = _interopRequireDefault(require(\"rc-util/lib/hooks/useLayoutEffect\"));\nvar _util = require(\"./util\");\nconst MeasureText = /*#__PURE__*/React.forwardRef(({\n  style,\n  children\n}, ref) => {\n  const spanRef = React.useRef(null);\n  React.useImperativeHandle(ref, () => ({\n    isExceed: () => {\n      const span = spanRef.current;\n      return span.scrollHeight > span.clientHeight;\n    },\n    getHeight: () => spanRef.current.clientHeight\n  }));\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: spanRef,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      pointerEvents: 'none',\n      backgroundColor: 'rgba(255, 0, 0, 0.65)'\n    }, style)\n  }, children);\n});\nconst getNodesLen = nodeList => nodeList.reduce((totalLen, node) => totalLen + ((0, _util.isValidText)(node) ? String(node).length : 1), 0);\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n    const node = nodeList[i];\n    const canCut = (0, _util.isValidText)(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen;\n    // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n  return nodeList;\n}\n// Measure for the `text` is exceed the `rows` or not\nconst STATUS_MEASURE_NONE = 0;\nconst STATUS_MEASURE_PREPARE = 1;\nconst STATUS_MEASURE_START = 2;\nconst STATUS_MEASURE_NEED_ELLIPSIS = 3;\nconst STATUS_MEASURE_NO_NEED_ELLIPSIS = 4;\nconst lineClipStyle = {\n  display: '-webkit-box',\n  overflow: 'hidden',\n  WebkitBoxOrient: 'vertical'\n};\nfunction EllipsisMeasure(props) {\n  const {\n    enableMeasure,\n    width,\n    text,\n    children,\n    rows,\n    expanded,\n    miscDeps,\n    onEllipsis\n  } = props;\n  const nodeList = React.useMemo(() => (0, _toArray.default)(text), [text]);\n  const nodeLen = React.useMemo(() => getNodesLen(nodeList), [text]);\n  // ========================= Full Content =========================\n  // Used for measure only, which means it's always render as no need ellipsis\n  const fullContent = React.useMemo(() => children(nodeList, false), [text]);\n  // ========================= Cut Content ==========================\n  const [ellipsisCutIndex, setEllipsisCutIndex] = React.useState(null);\n  const cutMidRef = React.useRef(null);\n  // ========================= NeedEllipsis =========================\n  const measureWhiteSpaceRef = React.useRef(null);\n  const needEllipsisRef = React.useRef(null);\n  // Measure for `rows-1` height, to avoid operation exceed the line height\n  const descRowsEllipsisRef = React.useRef(null);\n  const symbolRowEllipsisRef = React.useRef(null);\n  const [canEllipsis, setCanEllipsis] = React.useState(false);\n  const [needEllipsis, setNeedEllipsis] = React.useState(STATUS_MEASURE_NONE);\n  const [ellipsisHeight, setEllipsisHeight] = React.useState(0);\n  const [parentWhiteSpace, setParentWhiteSpace] = React.useState(null);\n  // Trigger start measure\n  (0, _useLayoutEffect.default)(() => {\n    if (enableMeasure && width && nodeLen) {\n      setNeedEllipsis(STATUS_MEASURE_PREPARE);\n    } else {\n      setNeedEllipsis(STATUS_MEASURE_NONE);\n    }\n  }, [width, text, rows, enableMeasure, nodeList]);\n  // Measure process\n  (0, _useLayoutEffect.default)(() => {\n    var _a, _b, _c, _d;\n    if (needEllipsis === STATUS_MEASURE_PREPARE) {\n      setNeedEllipsis(STATUS_MEASURE_START);\n      // Parent ref `white-space`\n      const nextWhiteSpace = measureWhiteSpaceRef.current && getComputedStyle(measureWhiteSpaceRef.current).whiteSpace;\n      setParentWhiteSpace(nextWhiteSpace);\n    } else if (needEllipsis === STATUS_MEASURE_START) {\n      const isOverflow = !!((_a = needEllipsisRef.current) === null || _a === void 0 ? void 0 : _a.isExceed());\n      setNeedEllipsis(isOverflow ? STATUS_MEASURE_NEED_ELLIPSIS : STATUS_MEASURE_NO_NEED_ELLIPSIS);\n      setEllipsisCutIndex(isOverflow ? [0, nodeLen] : null);\n      setCanEllipsis(isOverflow);\n      // Get the basic height of ellipsis rows\n      const baseRowsEllipsisHeight = ((_b = needEllipsisRef.current) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0;\n      // Get the height of `rows - 1` + symbol height\n      const descRowsEllipsisHeight = rows === 1 ? 0 : ((_c = descRowsEllipsisRef.current) === null || _c === void 0 ? void 0 : _c.getHeight()) || 0;\n      const symbolRowEllipsisHeight = ((_d = symbolRowEllipsisRef.current) === null || _d === void 0 ? void 0 : _d.getHeight()) || 0;\n      const maxRowsHeight = Math.max(baseRowsEllipsisHeight,\n      // height of rows with ellipsis\n      descRowsEllipsisHeight + symbolRowEllipsisHeight);\n      setEllipsisHeight(maxRowsHeight + 1);\n      onEllipsis(isOverflow);\n    }\n  }, [needEllipsis]);\n  // ========================= Cut Measure ==========================\n  const cutMidIndex = ellipsisCutIndex ? Math.ceil((ellipsisCutIndex[0] + ellipsisCutIndex[1]) / 2) : 0;\n  (0, _useLayoutEffect.default)(() => {\n    var _a;\n    const [minIndex, maxIndex] = ellipsisCutIndex || [0, 0];\n    if (minIndex !== maxIndex) {\n      const midHeight = ((_a = cutMidRef.current) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;\n      const isOverflow = midHeight > ellipsisHeight;\n      let targetMidIndex = cutMidIndex;\n      if (maxIndex - minIndex === 1) {\n        targetMidIndex = isOverflow ? minIndex : maxIndex;\n      }\n      setEllipsisCutIndex(isOverflow ? [minIndex, targetMidIndex] : [targetMidIndex, maxIndex]);\n    }\n  }, [ellipsisCutIndex, cutMidIndex]);\n  // ========================= Text Content =========================\n  const finalContent = React.useMemo(() => {\n    // Skip everything if `enableMeasure` is disabled\n    if (!enableMeasure) {\n      return children(nodeList, false);\n    }\n    if (needEllipsis !== STATUS_MEASURE_NEED_ELLIPSIS || !ellipsisCutIndex || ellipsisCutIndex[0] !== ellipsisCutIndex[1]) {\n      const content = children(nodeList, false);\n      // Limit the max line count to avoid scrollbar blink unless no need ellipsis\n      // https://github.com/ant-design/ant-design/issues/42958\n      if ([STATUS_MEASURE_NO_NEED_ELLIPSIS, STATUS_MEASURE_NONE].includes(needEllipsis)) {\n        return content;\n      }\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: Object.assign(Object.assign({}, lineClipStyle), {\n          WebkitLineClamp: rows\n        })\n      }, content);\n    }\n    return children(expanded ? nodeList : sliceNodes(nodeList, ellipsisCutIndex[0]), canEllipsis);\n  }, [expanded, needEllipsis, ellipsisCutIndex, nodeList].concat((0, _toConsumableArray2.default)(miscDeps)));\n  // ============================ Render ============================\n  const measureStyle = {\n    width,\n    margin: 0,\n    padding: 0,\n    whiteSpace: parentWhiteSpace === 'nowrap' ? 'normal' : 'inherit'\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, finalContent, needEllipsis === STATUS_MEASURE_START && (/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows\n    }),\n    ref: needEllipsisRef\n  }, fullContent), /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows - 1\n    }),\n    ref: descRowsEllipsisRef\n  }, fullContent), /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: 1\n    }),\n    ref: symbolRowEllipsisRef\n  }, children([], true)))), needEllipsis === STATUS_MEASURE_NEED_ELLIPSIS && ellipsisCutIndex && ellipsisCutIndex[0] !== ellipsisCutIndex[1] && (/*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign({}, measureStyle), {\n      top: 400\n    }),\n    ref: cutMidRef\n  }, children(sliceNodes(nodeList, cutMidIndex), true))), needEllipsis === STATUS_MEASURE_PREPARE && (/*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      whiteSpace: 'inherit'\n    },\n    ref: measureWhiteSpaceRef\n  })));\n}"],"mappings":"AAAA,YAAY;AACZ,YAAY;;AAEZ,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAC9F,IAAIC,sBAAsB,GAAGF,OAAO,CAAC,8CAA8C,CAAC,CAACC,OAAO;AAC5FE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACJ,OAAO,GAAGM,eAAe;AACjC,IAAIC,mBAAmB,GAAGN,sBAAsB,CAACF,OAAO,CAAC,0CAA0C,CAAC,CAAC;AACrG,IAAIS,KAAK,GAAGV,uBAAuB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;AACrD,IAAIU,QAAQ,GAAGR,sBAAsB,CAACF,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAC9E,IAAIW,gBAAgB,GAAGT,sBAAsB,CAACF,OAAO,CAAC,mCAAmC,CAAC,CAAC;AAC3F,IAAIY,KAAK,GAAGZ,OAAO,CAAC,QAAQ,CAAC;AAC7B,MAAMa,WAAW,GAAG,aAAaJ,KAAK,CAACK,UAAU,CAAC,CAAAC,IAAA,EAG/CC,GAAG,KAAK;EAAA,IAHwC;IACjDC,KAAK;IACLC;EACF,CAAC,GAAAH,IAAA;EACC,MAAMI,OAAO,GAAGV,KAAK,CAACW,MAAM,CAAC,IAAI,CAAC;EAClCX,KAAK,CAACY,mBAAmB,CAACL,GAAG,EAAE,OAAO;IACpCM,QAAQ,EAAEA,CAAA,KAAM;MACd,MAAMC,IAAI,GAAGJ,OAAO,CAACK,OAAO;MAC5B,OAAOD,IAAI,CAACE,YAAY,GAAGF,IAAI,CAACG,YAAY;IAC9C,CAAC;IACDC,SAAS,EAAEA,CAAA,KAAMR,OAAO,CAACK,OAAO,CAACE;EACnC,CAAC,CAAC,CAAC;EACH,OAAO,aAAajB,KAAK,CAACmB,aAAa,CAAC,MAAM,EAAE;IAC9C,aAAa,EAAE,IAAI;IACnBZ,GAAG,EAAEG,OAAO;IACZF,KAAK,EAAEd,MAAM,CAAC0B,MAAM,CAAC;MACnBC,QAAQ,EAAE,OAAO;MACjBC,OAAO,EAAE,OAAO;MAChBC,IAAI,EAAE,CAAC;MACPC,GAAG,EAAE,CAAC;MACNC,aAAa,EAAE,MAAM;MACrBC,eAAe,EAAE;IACnB,CAAC,EAAElB,KAAK;EACV,CAAC,EAAEC,QAAQ,CAAC;AACd,CAAC,CAAC;AACF,MAAMkB,WAAW,GAAGC,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAAC,CAACC,QAAQ,EAAEC,IAAI,KAAKD,QAAQ,IAAI,CAAC,CAAC,EAAE3B,KAAK,CAAC6B,WAAW,EAAED,IAAI,CAAC,GAAGE,MAAM,CAACF,IAAI,CAAC,CAACG,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAC3I,SAASC,UAAUA,CAACP,QAAQ,EAAEQ,GAAG,EAAE;EACjC,IAAIC,OAAO,GAAG,CAAC;EACf,MAAMC,eAAe,GAAG,EAAE;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,QAAQ,CAACM,MAAM,EAAEK,CAAC,IAAI,CAAC,EAAE;IAC3C;IACA,IAAIF,OAAO,KAAKD,GAAG,EAAE;MACnB,OAAOE,eAAe;IACxB;IACA,MAAMP,IAAI,GAAGH,QAAQ,CAACW,CAAC,CAAC;IACxB,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAErC,KAAK,CAAC6B,WAAW,EAAED,IAAI,CAAC;IAC3C,MAAMU,OAAO,GAAGD,MAAM,GAAGP,MAAM,CAACF,IAAI,CAAC,CAACG,MAAM,GAAG,CAAC;IAChD,MAAMQ,OAAO,GAAGL,OAAO,GAAGI,OAAO;IACjC;IACA;IACA,IAAIC,OAAO,GAAGN,GAAG,EAAE;MACjB,MAAMO,OAAO,GAAGP,GAAG,GAAGC,OAAO;MAC7BC,eAAe,CAACM,IAAI,CAACX,MAAM,CAACF,IAAI,CAAC,CAACc,KAAK,CAAC,CAAC,EAAEF,OAAO,CAAC,CAAC;MACpD,OAAOL,eAAe;IACxB;IACAA,eAAe,CAACM,IAAI,CAACb,IAAI,CAAC;IAC1BM,OAAO,GAAGK,OAAO;EACnB;EACA,OAAOd,QAAQ;AACjB;AACA;AACA,MAAMkB,mBAAmB,GAAG,CAAC;AAC7B,MAAMC,sBAAsB,GAAG,CAAC;AAChC,MAAMC,oBAAoB,GAAG,CAAC;AAC9B,MAAMC,4BAA4B,GAAG,CAAC;AACtC,MAAMC,+BAA+B,GAAG,CAAC;AACzC,MAAMC,aAAa,GAAG;EACpB7B,OAAO,EAAE,aAAa;EACtB8B,QAAQ,EAAE,QAAQ;EAClBC,eAAe,EAAE;AACnB,CAAC;AACD,SAASvD,eAAeA,CAACwD,KAAK,EAAE;EAC9B,MAAM;IACJC,aAAa;IACbC,KAAK;IACLC,IAAI;IACJhD,QAAQ;IACRiD,IAAI;IACJC,QAAQ;IACRC,QAAQ;IACRC;EACF,CAAC,GAAGP,KAAK;EACT,MAAM1B,QAAQ,GAAG5B,KAAK,CAAC8D,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE7D,QAAQ,CAACT,OAAO,EAAEiE,IAAI,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EACzE,MAAMhB,OAAO,GAAGzC,KAAK,CAAC8D,OAAO,CAAC,MAAMnC,WAAW,CAACC,QAAQ,CAAC,EAAE,CAAC6B,IAAI,CAAC,CAAC;EAClE;EACA;EACA,MAAMM,WAAW,GAAG/D,KAAK,CAAC8D,OAAO,CAAC,MAAMrD,QAAQ,CAACmB,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC6B,IAAI,CAAC,CAAC;EAC1E;EACA,MAAM,CAACO,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjE,KAAK,CAACkE,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAMC,SAAS,GAAGnE,KAAK,CAACW,MAAM,CAAC,IAAI,CAAC;EACpC;EACA,MAAMyD,oBAAoB,GAAGpE,KAAK,CAACW,MAAM,CAAC,IAAI,CAAC;EAC/C,MAAM0D,eAAe,GAAGrE,KAAK,CAACW,MAAM,CAAC,IAAI,CAAC;EAC1C;EACA,MAAM2D,mBAAmB,GAAGtE,KAAK,CAACW,MAAM,CAAC,IAAI,CAAC;EAC9C,MAAM4D,oBAAoB,GAAGvE,KAAK,CAACW,MAAM,CAAC,IAAI,CAAC;EAC/C,MAAM,CAAC6D,WAAW,EAAEC,cAAc,CAAC,GAAGzE,KAAK,CAACkE,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAG3E,KAAK,CAACkE,QAAQ,CAACpB,mBAAmB,CAAC;EAC3E,MAAM,CAAC8B,cAAc,EAAEC,iBAAiB,CAAC,GAAG7E,KAAK,CAACkE,QAAQ,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/E,KAAK,CAACkE,QAAQ,CAAC,IAAI,CAAC;EACpE;EACA,CAAC,CAAC,EAAEhE,gBAAgB,CAACV,OAAO,EAAE,MAAM;IAClC,IAAI+D,aAAa,IAAIC,KAAK,IAAIf,OAAO,EAAE;MACrCkC,eAAe,CAAC5B,sBAAsB,CAAC;IACzC,CAAC,MAAM;MACL4B,eAAe,CAAC7B,mBAAmB,CAAC;IACtC;EACF,CAAC,EAAE,CAACU,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEH,aAAa,EAAE3B,QAAQ,CAAC,CAAC;EAChD;EACA,CAAC,CAAC,EAAE1B,gBAAgB,CAACV,OAAO,EAAE,MAAM;IAClC,IAAIwF,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IAClB,IAAIT,YAAY,KAAK3B,sBAAsB,EAAE;MAC3C4B,eAAe,CAAC3B,oBAAoB,CAAC;MACrC;MACA,MAAMoC,cAAc,GAAGhB,oBAAoB,CAACrD,OAAO,IAAIsE,gBAAgB,CAACjB,oBAAoB,CAACrD,OAAO,CAAC,CAACuE,UAAU;MAChHP,mBAAmB,CAACK,cAAc,CAAC;IACrC,CAAC,MAAM,IAAIV,YAAY,KAAK1B,oBAAoB,EAAE;MAChD,MAAMuC,UAAU,GAAG,CAAC,EAAE,CAACP,EAAE,GAAGX,eAAe,CAACtD,OAAO,MAAM,IAAI,IAAIiE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACnE,QAAQ,CAAC,CAAC,CAAC;MACxG8D,eAAe,CAACY,UAAU,GAAGtC,4BAA4B,GAAGC,+BAA+B,CAAC;MAC5Fe,mBAAmB,CAACsB,UAAU,GAAG,CAAC,CAAC,EAAE9C,OAAO,CAAC,GAAG,IAAI,CAAC;MACrDgC,cAAc,CAACc,UAAU,CAAC;MAC1B;MACA,MAAMC,sBAAsB,GAAG,CAAC,CAACP,EAAE,GAAGZ,eAAe,CAACtD,OAAO,MAAM,IAAI,IAAIkE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC/D,SAAS,CAAC,CAAC,KAAK,CAAC;MACxH;MACA,MAAMuE,sBAAsB,GAAG/B,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAACwB,EAAE,GAAGZ,mBAAmB,CAACvD,OAAO,MAAM,IAAI,IAAImE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAChE,SAAS,CAAC,CAAC,KAAK,CAAC;MAC7I,MAAMwE,uBAAuB,GAAG,CAAC,CAACP,EAAE,GAAGZ,oBAAoB,CAACxD,OAAO,MAAM,IAAI,IAAIoE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACjE,SAAS,CAAC,CAAC,KAAK,CAAC;MAC9H,MAAMyE,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACL,sBAAsB;MACrD;MACAC,sBAAsB,GAAGC,uBAAuB,CAAC;MACjDb,iBAAiB,CAACc,aAAa,GAAG,CAAC,CAAC;MACpC9B,UAAU,CAAC0B,UAAU,CAAC;IACxB;EACF,CAAC,EAAE,CAACb,YAAY,CAAC,CAAC;EAClB;EACA,MAAMoB,WAAW,GAAG9B,gBAAgB,GAAG4B,IAAI,CAACG,IAAI,CAAC,CAAC/B,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;EACrG,CAAC,CAAC,EAAE9D,gBAAgB,CAACV,OAAO,EAAE,MAAM;IAClC,IAAIwF,EAAE;IACN,MAAM,CAACgB,QAAQ,EAAEC,QAAQ,CAAC,GAAGjC,gBAAgB,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IACvD,IAAIgC,QAAQ,KAAKC,QAAQ,EAAE;MACzB,MAAMC,SAAS,GAAG,CAAC,CAAClB,EAAE,GAAGb,SAAS,CAACpD,OAAO,MAAM,IAAI,IAAIiE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC9D,SAAS,CAAC,CAAC,KAAK,CAAC;MACrG,MAAMqE,UAAU,GAAGW,SAAS,GAAGtB,cAAc;MAC7C,IAAIuB,cAAc,GAAGL,WAAW;MAChC,IAAIG,QAAQ,GAAGD,QAAQ,KAAK,CAAC,EAAE;QAC7BG,cAAc,GAAGZ,UAAU,GAAGS,QAAQ,GAAGC,QAAQ;MACnD;MACAhC,mBAAmB,CAACsB,UAAU,GAAG,CAACS,QAAQ,EAAEG,cAAc,CAAC,GAAG,CAACA,cAAc,EAAEF,QAAQ,CAAC,CAAC;IAC3F;EACF,CAAC,EAAE,CAACjC,gBAAgB,EAAE8B,WAAW,CAAC,CAAC;EACnC;EACA,MAAMM,YAAY,GAAGpG,KAAK,CAAC8D,OAAO,CAAC,MAAM;IACvC;IACA,IAAI,CAACP,aAAa,EAAE;MAClB,OAAO9C,QAAQ,CAACmB,QAAQ,EAAE,KAAK,CAAC;IAClC;IACA,IAAI8C,YAAY,KAAKzB,4BAA4B,IAAI,CAACe,gBAAgB,IAAIA,gBAAgB,CAAC,CAAC,CAAC,KAAKA,gBAAgB,CAAC,CAAC,CAAC,EAAE;MACrH,MAAMqC,OAAO,GAAG5F,QAAQ,CAACmB,QAAQ,EAAE,KAAK,CAAC;MACzC;MACA;MACA,IAAI,CAACsB,+BAA+B,EAAEJ,mBAAmB,CAAC,CAACwD,QAAQ,CAAC5B,YAAY,CAAC,EAAE;QACjF,OAAO2B,OAAO;MAChB;MACA,OAAO,aAAarG,KAAK,CAACmB,aAAa,CAAC,MAAM,EAAE;QAC9CX,KAAK,EAAEd,MAAM,CAAC0B,MAAM,CAAC1B,MAAM,CAAC0B,MAAM,CAAC,CAAC,CAAC,EAAE+B,aAAa,CAAC,EAAE;UACrDoD,eAAe,EAAE7C;QACnB,CAAC;MACH,CAAC,EAAE2C,OAAO,CAAC;IACb;IACA,OAAO5F,QAAQ,CAACkD,QAAQ,GAAG/B,QAAQ,GAAGO,UAAU,CAACP,QAAQ,EAAEoC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAEQ,WAAW,CAAC;EAC/F,CAAC,EAAE,CAACb,QAAQ,EAAEe,YAAY,EAAEV,gBAAgB,EAAEpC,QAAQ,CAAC,CAAC4E,MAAM,CAAC,CAAC,CAAC,EAAEzG,mBAAmB,CAACP,OAAO,EAAEoE,QAAQ,CAAC,CAAC,CAAC;EAC3G;EACA,MAAM6C,YAAY,GAAG;IACnBjD,KAAK;IACLkD,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE,CAAC;IACVrB,UAAU,EAAER,gBAAgB,KAAK,QAAQ,GAAG,QAAQ,GAAG;EACzD,CAAC;EACD,OAAO,aAAa9E,KAAK,CAACmB,aAAa,CAACnB,KAAK,CAAC4G,QAAQ,EAAE,IAAI,EAAER,YAAY,EAAE1B,YAAY,KAAK1B,oBAAoB,KAAK,aAAahD,KAAK,CAACmB,aAAa,CAACnB,KAAK,CAAC4G,QAAQ,EAAE,IAAI,EAAE,aAAa5G,KAAK,CAACmB,aAAa,CAACf,WAAW,EAAE;IACzNI,KAAK,EAAEd,MAAM,CAAC0B,MAAM,CAAC1B,MAAM,CAAC0B,MAAM,CAAC1B,MAAM,CAAC0B,MAAM,CAAC,CAAC,CAAC,EAAEqF,YAAY,CAAC,EAAEtD,aAAa,CAAC,EAAE;MAClFoD,eAAe,EAAE7C;IACnB,CAAC,CAAC;IACFnD,GAAG,EAAE8D;EACP,CAAC,EAAEN,WAAW,CAAC,EAAE,aAAa/D,KAAK,CAACmB,aAAa,CAACf,WAAW,EAAE;IAC7DI,KAAK,EAAEd,MAAM,CAAC0B,MAAM,CAAC1B,MAAM,CAAC0B,MAAM,CAAC1B,MAAM,CAAC0B,MAAM,CAAC,CAAC,CAAC,EAAEqF,YAAY,CAAC,EAAEtD,aAAa,CAAC,EAAE;MAClFoD,eAAe,EAAE7C,IAAI,GAAG;IAC1B,CAAC,CAAC;IACFnD,GAAG,EAAE+D;EACP,CAAC,EAAEP,WAAW,CAAC,EAAE,aAAa/D,KAAK,CAACmB,aAAa,CAACf,WAAW,EAAE;IAC7DI,KAAK,EAAEd,MAAM,CAAC0B,MAAM,CAAC1B,MAAM,CAAC0B,MAAM,CAAC1B,MAAM,CAAC0B,MAAM,CAAC,CAAC,CAAC,EAAEqF,YAAY,CAAC,EAAEtD,aAAa,CAAC,EAAE;MAClFoD,eAAe,EAAE;IACnB,CAAC,CAAC;IACFhG,GAAG,EAAEgE;EACP,CAAC,EAAE9D,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEiE,YAAY,KAAKzB,4BAA4B,IAAIe,gBAAgB,IAAIA,gBAAgB,CAAC,CAAC,CAAC,KAAKA,gBAAgB,CAAC,CAAC,CAAC,KAAK,aAAahE,KAAK,CAACmB,aAAa,CAACf,WAAW,EAAE;IAC3LI,KAAK,EAAEd,MAAM,CAAC0B,MAAM,CAAC1B,MAAM,CAAC0B,MAAM,CAAC,CAAC,CAAC,EAAEqF,YAAY,CAAC,EAAE;MACpDjF,GAAG,EAAE;IACP,CAAC,CAAC;IACFjB,GAAG,EAAE4D;EACP,CAAC,EAAE1D,QAAQ,CAAC0B,UAAU,CAACP,QAAQ,EAAEkE,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAEpB,YAAY,KAAK3B,sBAAsB,KAAK,aAAa/C,KAAK,CAACmB,aAAa,CAAC,MAAM,EAAE;IAC3IX,KAAK,EAAE;MACL8E,UAAU,EAAE;IACd,CAAC;IACD/E,GAAG,EAAE6D;EACP,CAAC,CAAC,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}