{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertDataToEntities = convertDataToEntities;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\nexports.convertTreeToData = convertTreeToData;\nexports.fillFieldNames = fillFieldNames;\nexports.flattenTreeData = flattenTreeData;\nexports.getKey = getKey;\nexports.getPosition = getPosition;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.isTreeNode = isTreeNode;\nexports.traverseDataNodes = traverseDataNodes;\nexports.warningWithoutKey = warningWithoutKey;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\nvar _keyUtil = _interopRequireDefault(require(\"./keyUtil\"));\nvar _excluded = [\"children\"];\nfunction getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nfunction isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nfunction fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n    title = _ref.title,\n    _title = _ref._title,\n    key = _ref.key,\n    children = _ref.children;\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n\n/**\n * Warning if TreeNode do not provides key\n */\nfunction warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n        children = _treeNode$props.children,\n        rest = (0, _objectWithoutProperties2.default)(_treeNode$props, _excluded);\n      var dataNode = (0, _objectSpread2.default)({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nfunction flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n    fieldTitles = _fillFieldNames._title,\n    fieldKey = _fillFieldNames.key,\n    fieldChildren = _fillFieldNames.children;\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos);\n\n      // Pick matched title in field title list\n      var mergedTitle;\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n\n      // Add FlattenDataNode into list\n      // We use `Object.assign` here to save perf since babel's `objectSpread` has perf issue\n      var flattenNode = Object.assign((0, _omit.default)(treeNode, [].concat((0, _toConsumableArray2.default)(fieldTitles), [fieldKey, fieldChildren])), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode);\n\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nfunction traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n  if ((0, _typeof2.default)(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n\n  // Init config\n  var _mergedConfig = mergedConfig,\n    childrenPropName = _mergedConfig.childrenPropName,\n    externalGetKey = _mergedConfig.externalGetKey,\n    fieldNames = _mergedConfig.fieldNames;\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n    fieldKey = _fillFieldNames2.key,\n    fieldChildren = _fillFieldNames2.children;\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\n\n  // Get keys\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  }\n\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat((0, _toConsumableArray2.default)(pathNodes), [node]) : [];\n\n    // Process node if is not root\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var _data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(_data);\n    }\n\n    // Process children node\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nfunction convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref2.initWrapper,\n    processEntity = _ref2.processEntity,\n    onProcessFinished = _ref2.onProcessFinished,\n    externalGetKey = _ref2.externalGetKey,\n    childrenPropName = _ref2.childrenPropName,\n    fieldNames = _ref2.fieldNames;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level,\n      nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nfunction getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n    selectedKeys = _ref3.selectedKeys,\n    loadedKeys = _ref3.loadedKeys,\n    loadingKeys = _ref3.loadingKeys,\n    checkedKeys = _ref3.checkedKeys,\n    halfCheckedKeys = _ref3.halfCheckedKeys,\n    dragOverNodeKey = _ref3.dragOverNodeKey,\n    dropPosition = _ref3.dropPosition,\n    keyEntities = _ref3.keyEntities;\n  var entity = (0, _keyUtil.default)(keyEntities, key);\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active,\n    eventKey = props.eventKey;\n  var eventData = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","convertDataToEntities","convertNodePropsToEventData","convertTreeToData","fillFieldNames","flattenTreeData","getKey","getPosition","getTreeNodeProps","isTreeNode","traverseDataNodes","warningWithoutKey","_typeof2","_toConsumableArray2","_objectSpread2","_objectWithoutProperties2","_toArray","_omit","_warning","_keyUtil","_excluded","level","index","concat","node","type","key","pos","undefined","fieldNames","_ref","title","_title","children","mergedTitle","treeData","keys","Map","dig","list","path","arguments","length","forEach","treeNode","default","recordKey","String","has","set","rootNodes","treeNodes","map","_treeNode$props","props","rest","dataNode","parsedChildren","filter","treeNodeList","expandedKeys","_fillFieldNames","fieldTitles","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","mergedKey","i","fieldTitle","flattenNode","assign","data","isStart","isEnd","push","dataNodes","callback","config","mergedConfig","externalGetKey","_mergedConfig","childrenPropName","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","pathNodes","connectNodes","_data","parentPos","nodes","subNode","subIndex","_ref2","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","_ref3","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","active","eventData","get"],"sources":["/Users/tumowuh/Desktop/backups/sumki-mini-app_Release_Vers_20250401_221838/node_modules/rc-tree/lib/utils/treeUtil.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertDataToEntities = convertDataToEntities;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\nexports.convertTreeToData = convertTreeToData;\nexports.fillFieldNames = fillFieldNames;\nexports.flattenTreeData = flattenTreeData;\nexports.getKey = getKey;\nexports.getPosition = getPosition;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.isTreeNode = isTreeNode;\nexports.traverseDataNodes = traverseDataNodes;\nexports.warningWithoutKey = warningWithoutKey;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\nvar _keyUtil = _interopRequireDefault(require(\"./keyUtil\"));\nvar _excluded = [\"children\"];\nfunction getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nfunction isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nfunction fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n    title = _ref.title,\n    _title = _ref._title,\n    key = _ref.key,\n    children = _ref.children;\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n\n/**\n * Warning if TreeNode do not provides key\n */\nfunction warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n        children = _treeNode$props.children,\n        rest = (0, _objectWithoutProperties2.default)(_treeNode$props, _excluded);\n      var dataNode = (0, _objectSpread2.default)({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nfunction flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n    fieldTitles = _fillFieldNames._title,\n    fieldKey = _fillFieldNames.key,\n    fieldChildren = _fillFieldNames.children;\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos);\n\n      // Pick matched title in field title list\n      var mergedTitle;\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n\n      // Add FlattenDataNode into list\n      // We use `Object.assign` here to save perf since babel's `objectSpread` has perf issue\n      var flattenNode = Object.assign((0, _omit.default)(treeNode, [].concat((0, _toConsumableArray2.default)(fieldTitles), [fieldKey, fieldChildren])), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode);\n\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nfunction traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n  if ((0, _typeof2.default)(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n\n  // Init config\n  var _mergedConfig = mergedConfig,\n    childrenPropName = _mergedConfig.childrenPropName,\n    externalGetKey = _mergedConfig.externalGetKey,\n    fieldNames = _mergedConfig.fieldNames;\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n    fieldKey = _fillFieldNames2.key,\n    fieldChildren = _fillFieldNames2.children;\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\n\n  // Get keys\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  }\n\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat((0, _toConsumableArray2.default)(pathNodes), [node]) : [];\n\n    // Process node if is not root\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var _data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(_data);\n    }\n\n    // Process children node\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nfunction convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref2.initWrapper,\n    processEntity = _ref2.processEntity,\n    onProcessFinished = _ref2.onProcessFinished,\n    externalGetKey = _ref2.externalGetKey,\n    childrenPropName = _ref2.childrenPropName,\n    fieldNames = _ref2.fieldNames;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level,\n      nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nfunction getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n    selectedKeys = _ref3.selectedKeys,\n    loadedKeys = _ref3.loadedKeys,\n    loadingKeys = _ref3.loadingKeys,\n    checkedKeys = _ref3.checkedKeys,\n    halfCheckedKeys = _ref3.halfCheckedKeys,\n    dragOverNodeKey = _ref3.dragOverNodeKey,\n    dropPosition = _ref3.dropPosition,\n    keyEntities = _ref3.keyEntities;\n  var entity = (0, _keyUtil.default)(keyEntities, key);\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active,\n    eventKey = props.eventKey;\n  var eventData = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}