import React, { useState } from 'react';
import { PRODUCT_TYPES, SHAPES, MATERIALS, SIZES, COLORS } from './utils/data';
import ProgressBar from './components/ProgressBar';
import './App.css';

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram WebApp
declare global {
  interface Window {
    Telegram: {
      WebApp: {
        initData: string;
        initDataUnsafe: {
          user?: {
            id: number;
            first_name: string;
            last_name?: string;
            username?: string;
            language_code?: string;
          };
        };
        colorScheme: 'light' | 'dark';
        themeParams: {
          bg_color: string;
          text_color: string;
          hint_color: string;
          link_color: string;
          button_color: string;
          button_text_color: string;
          secondary_bg_color: string;
        };
        isExpanded: boolean;
        viewportHeight: number;
        viewportStableHeight: number;
        headerColor: string;
        backgroundColor: string;
        isClosingConfirmationEnabled: boolean;
        backButton: {
          isVisible: boolean;
          onClick: (callback: () => void) => void;
          show: () => void;
          hide: () => void;
        };
        mainButton: {
          text: string;
          color: string;
          textColor: string;
          isVisible: boolean;
          isProgressVisible: boolean;
          isActive: boolean;
          onClick: (callback: () => void) => void;
          show: () => void;
          hide: () => void;
          enable: () => void;
          disable: () => void;
          showProgress: (leaveActive?: boolean) => void;
          hideProgress: () => void;
          setText: (text: string) => void;
          setParams: (params: { text?: string; color?: string; textColor?: string; isVisible?: boolean; isProgressVisible?: boolean; isActive?: boolean }) => void;
        };
        expand: () => void;
        close: () => void;
        ready: () => void;
        sendData: (data: string) => void;
        showAlert: (message: string) => void;
        showConfirm: (message: string, callback: (confirmed: boolean) => void) => void;
        showPopup: (params: { title?: string; message: string; buttons?: Array<{ id?: string; type?: 'default' | 'ok' | 'close' | 'cancel' | 'destructive'; text: string }> }, callback?: (buttonId: string) => void) => void;
        showScanQrPopup: (params: { text?: string }, callback: (data: string) => void) => void;
        closeScanQrPopup: () => void;
        readTextFromClipboard: (callback: (data: string) => void) => void;
        requestWriteAccess: (callback: (access: boolean) => void) => void;
        requestContact: (callback?: (contact: { phone_number: string; first_name: string; last_name?: string; user_id?: number }) => void) => void;
        onEvent: (eventType: string, callback: (data: any) => void) => void;
        offEvent: (eventType: string, callback: (data: any) => void) => void;
        invokeCustomMethod: (method: string, params?: any, callback?: (result: any) => void) => void;
        isVersionAtLeast: (version: string) => boolean;
        platform: string;
        version: string;
      };
    };
  }
}

interface OrderData {
  productType: any;
  shape: any;
  material: any;
  size: any;
  color: any;
  quantity: number;
  giftWrap: boolean;
  notes: string;
  customerName: string;
  customerPhone: string;
}

const App: React.FC = () => {
  const [currentStep, setCurrentStep] = React.useState(0);
  const [orderData, setOrderData] = React.useState<OrderData>({
    productType: null,
    shape: null,
    material: null,
    size: null,
    color: null,
    quantity: 1,
    giftWrap: false,
    notes: '',
    customerName: '',
    customerPhone: ''
  });

  const [imageErrors, setImageErrors] = useState<{[key: string]: boolean}>({});
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
  const [productProgress, setProductProgress] = useState<{
    [key: string]: {
      step: number;
      data: Partial<OrderData>;
    }
  }>({});

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const saveProductProgress = (productId: string, step: number, data: Partial<OrderData>) => {
    setProductProgress(prev => ({
      ...prev,
      [productId]: { step, data }
    }));
  };

  const restoreProductProgress = (productId: string) => {
    const saved = productProgress[productId];
    if (saved) {
      console.log(`–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è ${productId}: —à–∞–≥ ${saved.step}`);
      setCurrentStep(saved.step);
      setOrderData(prevData => ({
        ...prevData,
        ...saved.data
      }));
      return true;
    }
    return false;
  };

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ orderData –∏–ª–∏ currentStep
  React.useEffect(() => {
    if (orderData.productType && currentStep > 0) {
      saveProductProgress(orderData.productType.id, currentStep, orderData);
    }
  }, [orderData, currentStep]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram
  const requestTelegramContact = () => {
    if (window.Telegram?.WebApp?.requestContact) {
      console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ Telegram...');
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å callback —Ñ—É–Ω–∫—Ü–∏–µ–π
      window.Telegram.WebApp.requestContact((contact) => {
        console.log('–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç:', contact);
        
        if (contact) {
          // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram
          setOrderData(prevData => ({
            ...prevData,
            customerName: contact.first_name + (contact.last_name ? ` ${contact.last_name}` : ''),
            customerPhone: contact.phone_number || prevData.customerPhone
          }));

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
          if (window.Telegram?.WebApp?.showAlert) {
            window.Telegram.WebApp.showAlert('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!');
          }
        }
      });
    } else {
      console.log('–§—É–Ω–∫—Ü–∏—è requestContact –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
      if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
        const user = window.Telegram.WebApp.initDataUnsafe.user;
        setOrderData(prevData => ({
          ...prevData,
          customerName: user.first_name + (user.last_name ? ` ${user.last_name}` : ''),
          customerPhone: prevData.customerPhone
        }));
        
        if (window.Telegram?.WebApp?.showAlert) {
          window.Telegram.WebApp.showAlert('–ò–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram!');
        }
      } else {
        // Fallback –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.Telegram?.WebApp?.showAlert) {
          window.Telegram.WebApp.showAlert('–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.');
        }
      }
    }
  };

  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
  const createInteractiveSteps = () => {
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    let stepsToShow: { realStep: number; title: string; icon: string; }[] = [];
    let stepMapping: { [key: number]: number } = {}; // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å–æ–º –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ –∏ —Ä–µ–∞–ª—å–Ω—ã–º —à–∞–≥–æ–º
    
    if (orderData.productType?.id === 'individual') {
      // –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ: –ø—Ä–æ–¥—É–∫—Ç ‚Üí –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
      stepsToShow = [
        { realStep: 0, title: '–ü—Ä–æ–¥—É–∫—Ç', icon: 'üé®' },
        { realStep: 6, title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', icon: 'üìù' }
      ];
    } else if (orderData.productType?.id === 'coaster') {
      // –î–ª—è –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫–∞: –ø—Ä–æ–¥—É–∫—Ç ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª ‚Üí —Ü–≤–µ—Ç ‚Üí –æ–ø—Ü–∏–∏ ‚Üí –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
      stepsToShow = [
        { realStep: 0, title: '–ü—Ä–æ–¥—É–∫—Ç', icon: 'üé®' },
        { realStep: 2, title: '–ú–∞—Ç–µ—Ä–∏–∞–ª', icon: 'üíé' },
        { realStep: 4, title: '–¶–≤–µ—Ç', icon: 'üåà' },
        { realStep: 5, title: '–û–ø—Ü–∏–∏', icon: '‚öôÔ∏è' },
        { realStep: 6, title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', icon: 'üìù' }
      ];
    } else {
      // –î–ª—è —Å—É–º–∫–∏: –≤—Å–µ —à–∞–≥–∏
      stepsToShow = [
        { realStep: 0, title: '–ü—Ä–æ–¥—É–∫—Ç', icon: 'üé®' },
        { realStep: 1, title: '–§–æ—Ä–º–∞', icon: 'üìê' },
        { realStep: 2, title: '–ú–∞—Ç–µ—Ä–∏–∞–ª', icon: 'üíé' },
        { realStep: 3, title: '–†–∞–∑–º–µ—Ä', icon: 'üìè' },
        { realStep: 4, title: '–¶–≤–µ—Ç', icon: 'üåà' },
        { realStep: 5, title: '–û–ø—Ü–∏–∏', icon: '‚öôÔ∏è' },
        { realStep: 6, title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', icon: 'üìù' }
      ];
    }
    
    return stepsToShow.map((stepInfo, progressIndex) => {
      const { realStep, title, icon } = stepInfo;
      stepMapping[progressIndex] = realStep;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞
      const completed = realStep < currentStep;
      const active = realStep === currentStep;
      
      // –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
      let clickable = false;
      if (completed || active) {
        clickable = true;
      } else if (progressIndex === stepsToShow.findIndex(s => s.realStep === currentStep) + 1) {
        // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω –µ—Å–ª–∏ –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏
        clickable = canNavigateToNextStep();
      }
      
      return {
        id: realStep,
        title,
        icon,
        completed,
        active,
        clickable
      };
    });
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  const canNavigateToNextStep = () => {
    switch (currentStep) {
      case 0: return !!orderData.productType;
      case 1: return !!orderData.shape;
      case 2: 
        // –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        if (orderData.productType?.id === 'individual') {
          return true;
        }
        return !!orderData.material;
      case 3: return !!orderData.size;
      case 4: return !!orderData.color;
      case 5: return true; // –û–ø—Ü–∏–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
      case 6: return true;
      default: return false;
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —à–∞–≥—É
  const handleStepClick = (stepId: number) => {
    console.log(`–ö–ª–∏–∫ –ø–æ —à–∞–≥—É ${stepId} —Å —Ç–µ–∫—É—â–µ–≥–æ ${currentStep}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —à–∞–≥ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π
    const interactiveSteps = createInteractiveSteps();
    const clickedStep = interactiveSteps.find(step => step.id === stepId);
    
    if (clickedStep && clickedStep.clickable) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      if (orderData.productType?.id === 'individual') {
        // –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ 2 —à–∞–≥–∞: –ø—Ä–æ–¥—É–∫—Ç (0) –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (6)
        if (stepId === 0 || stepId === 6) {
          setCurrentStep(stepId);
        }
      } else if (orderData.productType?.id === 'coaster') {
        // –î–ª—è –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫–∞: –ø—Ä–æ–¥—É–∫—Ç (0) ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª (2) ‚Üí —Ü–≤–µ—Ç (4) ‚Üí –æ–ø—Ü–∏–∏ (5) ‚Üí –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (6)
        const allowedSteps = [0, 2, 4, 5, 6];
        if (allowedSteps.includes(stepId)) {
          setCurrentStep(stepId);
        }
      } else if (orderData.productType?.id === 'bag') {
        // –î–ª—è —Å—É–º–∫–∏: –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –ø—Ä–æ–¥—É–∫—Ç (0) ‚Üí —Ñ–æ—Ä–º–∞ (1) ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª (2) ‚Üí —Ä–∞–∑–º–µ—Ä (3) ‚Üí —Ü–≤–µ—Ç (4) ‚Üí –æ–ø—Ü–∏–∏ (6) ‚Üí –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (5)
        if (stepId >= 0 && stepId <= 6) {
          setCurrentStep(stepId);
        }
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
        if (stepId >= 0 && stepId <= 6) {
          setCurrentStep(stepId);
        }
      }
    }
  };

  const handleImageError = (itemId: string) => {
    setImageErrors(prev => ({ ...prev, [itemId]: true }));
  };

  const handleImageLoad = (itemId: string) => {
    setImageErrors(prev => ({ ...prev, [itemId]: false }));
  };

  const getProductIcon = (productId: string) => {
    switch (productId) {
      case 'bag': return 'üëú';
      case 'coaster': return '‚òï';
      case 'individual': return 'üíé';
      default: return 'üì¶';
    }
  };

  const getShapeIcon = (shapeId: string) => {
    switch (shapeId) {
      case 'round': return '‚≠ï';
      case 'square': return '‚¨ú';
      case 'heart': return '‚ù§Ô∏è';
      case 'rectangle': return '‚¨ú';
      case 'custom': return 'üé®';
      default: return 'üìê';
    }
  };

  const getMaterialIcon = (materialId: string) => {
    switch (materialId) {
      case 'akril': return 'üíé';
      case 'hrustal': return '‚ú®';
      case 'swarovski': return 'üíç';
      default: return 'üîÆ';
    }
  };

  const renderProductStep = () => (
    <div className="glass-container fade-in-up">
      <div className="section-header">
        <h2 className="section-title">üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞</h2>
        <p className="section-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å</p>
      </div>
      
      {PRODUCT_TYPES.map((product) => {
        const hasImageError = imageErrors[product.id];
        const hasSavedProgress = productProgress[product.id] && productProgress[product.id].step > 0;
        
        return (
          <div key={product.id} className="glass-card">
            <div className="card-content">
              <div className="card-icon">
                {hasImageError ? (
                  <div className="icon-fallback">
                    {getProductIcon(product.id)}
                  </div>
                ) : (
                  <img
                    src={product.image}
                    alt={product.displayName}
                    className="product-image"
                    onError={() => handleImageError(product.id)}
                    onLoad={() => handleImageLoad(product.id)}
                  />
                )}
              </div>
              <div className="card-info">
                <h3 className="card-title">
                  {product.displayName}
                  {hasSavedProgress && <span className="progress-badge">‚ö°</span>}
                </h3>
                <p className="card-description">
                  {product.description}
                  {hasSavedProgress && (
                    <span className="progress-hint"> ‚Ä¢ –ï—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
                  )}
                </p>
              </div>
              <button
                className={`card-button ${hasSavedProgress ? 'has-progress' : ''}`}
                onClick={() => {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                  const hasProgress = restoreProductProgress(product.id);
                  
                  if (!hasProgress) {
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                    setOrderData({ ...orderData, productType: product });
                    
                    if (product.id === 'individual') {
                      console.log(`–í—ã–±—Ä–∞–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é`);
                      setCurrentStep(6); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
                    } else if (product.id === 'coaster') {
                      console.log(`–í—ã–±—Ä–∞–Ω –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É`);
                      setCurrentStep(2); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É
                    } else {
                      console.log(`–í—ã–±—Ä–∞–Ω ${product.displayName}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–µ`);
                      setCurrentStep(1); // –û–±—ã—á–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
                    }
                  } else {
                    console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è ${product.displayName}`);
                  }
                }}
              >
                {hasSavedProgress ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–í—ã–±—Ä–∞—Ç—å'}
              </button>
            </div>
          </div>
        );
      })}
    </div>
  );

  const renderShapeStep = () => (
    <div className="glass-container fade-in-up">
      <div className="section-header">
        <h2 className="section-title">üìê –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É</h2>
        <p className="section-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞</p>
      </div>
      
      {SHAPES.map((shape) => {
        const hasImageError = imageErrors[shape.id];
        
        return (
          <div key={shape.id} className="glass-card">
            <div className="card-content">
              <div className="card-icon">
                {hasImageError ? (
                  <div className="icon-fallback">
                    {getShapeIcon(shape.id)}
                  </div>
                ) : (
                  <img
                    src={shape.image}
                    alt={shape.displayName}
                    className="product-image"
                    onError={() => handleImageError(shape.id)}
                    onLoad={() => handleImageLoad(shape.id)}
                  />
                )}
              </div>
              <div className="card-info">
                <h3 className="card-title">{shape.displayName}</h3>
                <p className="card-description">{shape.description}</p>
              </div>
              <button
                className="card-button"
                onClick={() => {
                  setOrderData({ ...orderData, shape });
                  setCurrentStep(2);
                }}
              >
                –í—ã–±—Ä–∞—Ç—å
              </button>
            </div>
          </div>
        );
      })}
    </div>
  );

  const renderMaterialStep = () => (
    <div className="glass-container fade-in-up">
      <div className="section-header">
        <h2 className="section-title">üíé –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª</h2>
        <p className="section-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–¥–µ–ª–∏—è</p>
      </div>
      
      {MATERIALS.map((material) => {
        const hasImageError = imageErrors[material.id];
        
        return (
          <div key={material.id} className="glass-card">
            <div className="card-content">
              <div className="card-icon">
                {hasImageError ? (
                  <div className="icon-fallback">
                    {getMaterialIcon(material.id)}
                  </div>
                ) : (
                  <img
                    src={material.image}
                    alt={material.displayName}
                    className="product-image"
                    onError={() => handleImageError(material.id)}
                    onLoad={() => handleImageLoad(material.id)}
                  />
                )}
              </div>
              <div className="card-info">
                <h3 className="card-title">{material.displayName}</h3>
                <p className="card-description">{material.description}</p>
              </div>
              <button
                className="card-button"
                onClick={() => {
                  setOrderData({ ...orderData, material });
                  // –î–ª—è –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫–æ–≤ –∏–¥–µ–º –∫ —Ü–≤–µ—Ç—É, –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∫ –æ–ø–∏—Å–∞–Ω–∏—é
                  if (orderData.productType?.id === 'coaster') {
                    console.log(`–í—ã–±—Ä–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–≤–µ—Ç—É`);
                    setCurrentStep(4); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–≤–µ—Ç—É
                  } else if (orderData.productType?.id === 'individual') {
                    console.log(`–í—ã–±—Ä–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é`);
                    setCurrentStep(6); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
                  } else {
                    console.log(`–í—ã–±—Ä–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—É–º–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–º–µ—Ä—É`);
                    setCurrentStep(3);
                  }
                }}
              >
                –í—ã–±—Ä–∞—Ç—å
              </button>
            </div>
          </div>
        );
      })}
    </div>
  );

  const renderSizeStep = () => (
    <div className="glass-container fade-in-up">
      <div className="section-header">
        <h2 className="section-title">üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä</h2>
        <p className="section-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –∏–∑–¥–µ–ª–∏—è</p>
      </div>
      
      {SIZES.map((size) => (
        <div key={size.id} className="glass-card">
          <div className="card-content">
            <div className="card-info">
              <h3 className="card-title">{size.displayName}</h3>
              <p className="card-description">{size.dimensions}</p>
            </div>
            <button
              className="card-button"
              onClick={() => {
                setOrderData({ ...orderData, size });
                setCurrentStep(4);
              }}
            >
              –í—ã–±—Ä–∞—Ç—å
            </button>
          </div>
        </div>
      ))}
    </div>
  );

  const renderColorStep = () => (
    <div className="glass-container fade-in-up">
      <div className="section-header">
        <h2 className="section-title">üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç</h2>
        <p className="section-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –≤–∞—à–µ–≥–æ –∏–∑–¥–µ–ª–∏—è</p>
      </div>
      
      <div className="color-grid">
        {COLORS.map((color) => (
          <div key={color.id} className="color-card">
            <div 
              className="color-circle" 
              style={{ backgroundColor: color.hex }}
            />
            <span className="color-name">{color.displayName}</span>
            <button
              className="card-button"
              onClick={() => {
                setOrderData({ ...orderData, color });
                // –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–¥—É—Ç –∫ –¥–æ–ø. –æ–ø—Ü–∏—è–º
                if (orderData.productType?.id === 'coaster') {
                  console.log(`–í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç –¥–ª—è –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø. –æ–ø—Ü–∏—è–º`);
                  setCurrentStep(5); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø. –æ–ø—Ü–∏—è–º
                } else if (orderData.productType?.id === 'bag') {
                  console.log(`–í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç –¥–ª—è —Å—É–º–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø. –æ–ø—Ü–∏—è–º`);
                  setCurrentStep(5); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø. –æ–ø—Ü–∏—è–º
                } else {
                  console.log(`–í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø—Ü–∏—è–º`);
                  setCurrentStep(5);
                }
              }}
            >
              –í—ã–±—Ä–∞—Ç—å
            </button>
          </div>
        ))}
      </div>
    </div>
  );

  const [selectedOptions, setSelectedOptions] = useState<string[]>([]);

  const handleOptionClick = (optionId: string) => {
    if (selectedOptions.includes(optionId)) {
      setSelectedOptions(selectedOptions.filter(id => id !== optionId));
    } else {
      setSelectedOptions([...selectedOptions, optionId]);
    }
  };

  const renderOptionsStep = () => {
    const isCoaster = orderData.productType?.id === 'coaster';
    const isBag = orderData.productType?.id === 'bag';
    
    const options = [
      ...(isBag || isCoaster ? [{
        id: 'chain',
        name: isBag ? '–†—É—á–∫–∞-—Ü–µ–ø–æ—á–∫–∞' : '–¶–µ–ø–æ—á–∫–∞ –¥–ª—è –Ω–æ—à–µ–Ω–∏—è',
        description: isBag ? '–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Ä—É—á–∫–∞ –≤ –≤–∏–¥–µ —Ü–µ–ø–æ—á–∫–∏' : '–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –Ω–æ—à–µ–Ω–∏—è –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫–∞'
      }] : []),
      ...(isBag || isCoaster ? [{
        id: 'clasp',
        name: '–ó–∞—Å—Ç–µ–∂–∫–∞',
        description: isBag ? '–ù–∞–¥–µ–∂–Ω–∞—è –∑–∞—Å—Ç–µ–∂–∫–∞ –¥–ª—è —Å—É–º–∫–∏' : '–ù–∞–¥–µ–∂–Ω–∞—è –∑–∞—Å—Ç–µ–∂–∫–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫–∞'
      }] : []),
      ...(isBag || isCoaster ? [{
        id: 'lining',
        name: '–ü–æ–¥–∫–ª–∞–¥',
        description: isBag ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–¥–∫–ª–∞–¥ –¥–ª—è —Å—É–º–∫–∏' : '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–¥–∫–ª–∞–¥ –¥–ª—è –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫–∞'
      }] : []),
      ...(isBag ? [{
        id: 'short-handle',
        name: '–ö–æ—Ä–æ—Ç–∫–∞—è —Ä—É—á–∫–∞',
        description: '–ö–æ—Ä–æ—Ç–∫–∞—è —É–¥–æ–±–Ω–∞—è —Ä—É—á–∫–∞ –¥–ª—è —Å—É–º–∫–∏'
      }] : []),
      ...(isBag ? [{
        id: 'long-handle',
        name: '–î–ª–∏–Ω–Ω–∞—è —Ä—É—á–∫–∞',
        description: '–î–ª–∏–Ω–Ω–∞—è —Ä—É—á–∫–∞ –¥–ª—è –Ω–æ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–ª–µ—á–æ'
      }] : []),
      ...(isBag ? [{
        id: 'pocket',
        name: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–∞—Ä–º–∞–Ω',
        description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞—Ä–º–∞–Ω –≤–Ω—É—Ç—Ä–∏ —Å—É–º–∫–∏'
      }] : []),
      ...(isBag ? [{
        id: 'zipper',
        name: '–ú–æ–ª–Ω–∏—è',
        description: '–ú–æ–ª–Ω–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è'
      }] : []),
      ...(isBag ? [{
        id: 'embroidery',
        name: '–í—ã—à–∏–≤–∫–∞',
        description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –≤—ã—à–∏–≤–∫–∞ –Ω–∞ —Å—É–º–∫–µ'
      }] : [])
    ];

    return (
      <div className="glass-container fade-in-up">
        <div className="section-header">
          <h2 className="section-title">‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏</h2>
          <p className="section-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞</p>
        </div>
        
        <div className="options-grid">
          {options.map(option => (
            <div key={option.id} className="glass-card">
              <div className="card-content">
                <div className="card-info">
                  <h3 className="card-title">{option.name}</h3>
                  <p className="card-description">{option.description}</p>
                </div>
                <button
                  className={`card-button ${selectedOptions.includes(option.id) ? 'selected' : ''}`}
                  onClick={() => handleOptionClick(option.id)}
                >
                  {selectedOptions.includes(option.id) ? '–£–±—Ä–∞—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
                </button>
              </div>
            </div>
          ))}
        </div>

        <div className="navigation">
          <button
            className="nav-button primary"
            onClick={() => {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤ notes
              const optionNames = selectedOptions.map(id => 
                options.find(opt => opt.id === id)?.name
              ).filter(Boolean).join(', ');
              
              setOrderData({ 
                ...orderData, 
                notes: optionNames ? `–î–æ–ø. –æ–ø—Ü–∏–∏: ${optionNames}. ${orderData.notes}` : orderData.notes
              });
              setCurrentStep(6); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
            }}
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </button>
        </div>
      </div>
    );
  };

  const renderOrderStep = () => {
    // –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if (orderData.productType?.id === 'individual') {
      return (
        <div className="glass-container fade-in-up">
          <div className="section-header">
            <h2 className="section-title">üìù –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑</h2>
            <p className="section-subtitle">–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–∑–¥–µ–ª–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ</p>
          </div>
          
          <div className="order-summary">
            <div className="summary-item">
              <span className="summary-label">–¢–∏–ø –∑–∞–∫–∞–∑–∞</span>
              <span className="summary-value">–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π</span>
            </div>
          </div>
          
          <div className="contact-form">
            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ Telegram */}
            <button
              type="button"
              className="telegram-contact-button"
              onClick={requestTelegramContact}
            >
              üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            </button>
            
            <input
              type="text"
              placeholder="–í–∞—à–µ –∏–º—è"
              value={orderData.customerName}
              onChange={(e) => setOrderData({ ...orderData, customerName: e.target.value })}
              className="form-input"
            />
            <input
              type="tel"
              placeholder="–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
              value={orderData.customerPhone}
              onChange={(e) => setOrderData({ ...orderData, customerPhone: e.target.value })}
              className="form-input"
            />
            <textarea
              placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–∑–¥–µ–ª–∏–µ: —Ä–∞–∑–º–µ—Ä—ã, —Ü–≤–µ—Ç–∞, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
              value={orderData.notes}
              onChange={(e) => setOrderData({ ...orderData, notes: e.target.value })}
              className="form-textarea"
              style={{ minHeight: '150px' }}
            />
          </div>
          
          <div className="navigation">
            <button
              className="nav-button primary"
              onClick={() => {
                if (window.Telegram?.WebApp) {
                  window.Telegram.WebApp.sendData(JSON.stringify(orderData));
                  window.Telegram.WebApp.showAlert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
                  window.Telegram.WebApp.close();
                }
              }}
            >
              –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
          </div>
        </div>
      );
    }

    // –î–ª—è –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É
    if (orderData.productType?.id === 'coaster') {
      return (
        <div className="glass-container fade-in-up">
          <div className="section-header">
            <h2 className="section-title">üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
            <p className="section-subtitle">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
          </div>
          
          <div className="order-summary">
            <div className="summary-item">
              <span className="summary-label">–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞</span>
              <span className="summary-value">{orderData.productType?.displayName}</span>
            </div>
            <div className="summary-item">
              <span className="summary-label">–ú–∞—Ç–µ—Ä–∏–∞–ª</span>
              <span className="summary-value">{orderData.material?.displayName}</span>
            </div>

          </div>
          
          <div className="contact-form">
            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ Telegram */}
            <button
              type="button"
              className="telegram-contact-button"
              onClick={requestTelegramContact}
            >
              üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            </button>
            
            <input
              type="text"
              placeholder="–í–∞—à–µ –∏–º—è"
              value={orderData.customerName}
              onChange={(e) => setOrderData({ ...orderData, customerName: e.target.value })}
              className="form-input"
            />
            <input
              type="tel"
              placeholder="–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
              value={orderData.customerPhone}
              onChange={(e) => setOrderData({ ...orderData, customerPhone: e.target.value })}
              className="form-input"
            />
            <textarea
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
              value={orderData.notes}
              onChange={(e) => setOrderData({ ...orderData, notes: e.target.value })}
              className="form-textarea"
            />
          </div>
          
          <div className="navigation">
            <button
              className="nav-button primary"
              onClick={() => {
                if (window.Telegram?.WebApp) {
                  window.Telegram.WebApp.sendData(JSON.stringify(orderData));
                  window.Telegram.WebApp.showAlert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
                  window.Telegram.WebApp.close();
                }
              }}
            >
              –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
          </div>
        </div>
      );
    }

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ñ–æ—Ä–º—É
    
    return (
      <div className="glass-container fade-in-up">
        <div className="section-header">
          <h2 className="section-title">üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
          <p className="section-subtitle">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</p>
        </div>
        
        <div className="order-summary">
          <div className="summary-item">
            <span className="summary-label">–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞</span>
            <span className="summary-value">{orderData.productType?.displayName}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">–§–æ—Ä–º–∞</span>
            <span className="summary-value">{orderData.shape?.displayName}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">–ú–∞—Ç–µ—Ä–∏–∞–ª</span>
            <span className="summary-value">{orderData.material?.displayName}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">–†–∞–∑–º–µ—Ä</span>
            <span className="summary-value">{orderData.size?.displayName}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">–¶–≤–µ—Ç</span>
            <span className="summary-value">{orderData.color?.displayName}</span>
          </div>

        </div>
        
        <div className="contact-form">
          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ Telegram */}
          <button
            type="button"
            className="telegram-contact-button"
            onClick={requestTelegramContact}
          >
            üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
          </button>
          
          <input
            type="text"
            placeholder="–í–∞—à–µ –∏–º—è"
            value={orderData.customerName}
            onChange={(e) => setOrderData({ ...orderData, customerName: e.target.value })}
            className="form-input"
          />
          <input
            type="tel"
            placeholder="–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
            value={orderData.customerPhone}
            onChange={(e) => setOrderData({ ...orderData, customerPhone: e.target.value })}
            className="form-input"
          />
          <textarea
            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
            value={orderData.notes}
            onChange={(e) => setOrderData({ ...orderData, notes: e.target.value })}
            className="form-textarea"
          />
        </div>
        
        <div className="navigation">
          <button
            className="nav-button primary"
            onClick={() => {
              if (window.Telegram?.WebApp) {
                window.Telegram.WebApp.sendData(JSON.stringify(orderData));
                window.Telegram.WebApp.showAlert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
                window.Telegram.WebApp.close();
              }
            }}
          >
            –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
          </button>
        </div>
      </div>
    );
  };

  const renderStep = () => {
    switch (currentStep) {
      case 0: return renderProductStep();
      case 1: return renderShapeStep();
      case 2: return renderMaterialStep();
      case 3: return renderSizeStep();
      case 4: return renderColorStep();
      case 5: return renderOptionsStep(); // –û–ø—Ü–∏–∏ –∏–¥—É—Ç –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
      case 6: return renderOrderStep();   // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥
      default: return renderProductStep();
    }
  };

  return (
    <div className="App">
      {/* Header */}
      <div className="app-header">
        <h1 className="app-title">–ó–∞–∫–∞–∑ –∏–∑–¥–µ–ª–∏–π –∏–∑ –±–∏—Å–µ—Ä–∞</h1>
        <p className="app-subtitle">–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ</p>
      </div>
      
      {/* Interactive Progress Bar - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
      {orderData.productType && (
        <ProgressBar 
          steps={createInteractiveSteps()} 
          onStepClick={handleStepClick}
        />
      )}
      
      {renderStep()}
      
      {/* Navigation */}
      {currentStep > 0 && (
        <div className="navigation">
          <button
            className="nav-button"
            onClick={() => {
              // –õ–æ–≥–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ "–ù–∞–∑–∞–¥" –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤
              console.log(`–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞ —à–∞–≥–µ ${currentStep} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${orderData.productType?.displayName}`);
              
              if (orderData.productType?.id === 'individual') {
                // –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ: —Ç–æ–ª—å–∫–æ 2 —à–∞–≥–∞ (–ø—Ä–æ–¥—É–∫—Ç ‚Üí –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ)
                if (currentStep === 6) {
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫ –ø—Ä–æ–¥—É–∫—Ç—É');
                  setCurrentStep(0); // –û—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫ –ø—Ä–æ–¥—É–∫—Ç—É
                }
              } else if (orderData.productType?.id === 'coaster') {
                // –î–ª—è –ø–æ–¥—Å—Ç–∞–∫–∞–Ω–Ω–∏–∫–∞: –ø—Ä–æ–¥—É–∫—Ç ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª ‚Üí —Ü–≤–µ—Ç ‚Üí –æ–ø—Ü–∏–∏ ‚Üí –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
                if (currentStep === 2) {
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç—É');
                  setCurrentStep(0); // –û—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç—É
                } else if (currentStep === 4) {
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç —Ü–≤–µ—Ç–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É');
                  setCurrentStep(2); // –û—Ç —Ü–≤–µ—Ç–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É
                } else if (currentStep === 5) {
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç –æ–ø—Ü–∏–π –∫ —Ü–≤–µ—Ç—É');
                  setCurrentStep(4); // –û—Ç –æ–ø—Ü–∏–π –∫ —Ü–≤–µ—Ç—É
                } else if (currentStep === 6) {
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫ –æ–ø—Ü–∏—è–º');
                  setCurrentStep(5); // –û—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫ –æ–ø—Ü–∏—è–º
                }
              } else if (orderData.productType?.id === 'bag') {
                // –î–ª—è —Å—É–º–∫–∏: –ø—Ä–æ–¥—É–∫—Ç ‚Üí —Ñ–æ—Ä–º–∞ ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª ‚Üí —Ä–∞–∑–º–µ—Ä ‚Üí —Ü–≤–µ—Ç ‚Üí –æ–ø—Ü–∏–∏ ‚Üí –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
                if (currentStep === 1) { // –§–æ—Ä–º–∞
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç —Ñ–æ—Ä–º—ã –∫ –ø—Ä–æ–¥—É–∫—Ç—É');
                  setCurrentStep(0);
                } else if (currentStep === 2) { // –ú–∞—Ç–µ—Ä–∏–∞–ª
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫ —Ñ–æ—Ä–º–µ');
                  setCurrentStep(1);
                } else if (currentStep === 3) { // –†–∞–∑–º–µ—Ä
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É');
                  setCurrentStep(2);
                } else if (currentStep === 4) { // –¶–≤–µ—Ç
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç —Ü–≤–µ—Ç–∞ –∫ —Ä–∞–∑–º–µ—Ä—É');
                  setCurrentStep(3);
                } else if (currentStep === 5) { // –û–ø—Ü–∏–∏
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç –æ–ø—Ü–∏–π –∫ —Ü–≤–µ—Ç—É');
                  setCurrentStep(4);
                } else if (currentStep === 6) { // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
                  console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫ –æ–ø—Ü–∏—è–º');
                  setCurrentStep(5);
                }
              } else {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
                console.log('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥');
                setCurrentStep(currentStep - 1);
              }
            }}
          >
            –ù–∞–∑–∞–¥
          </button>
        </div>
      )}
    </div>
  );
};

export default App; 